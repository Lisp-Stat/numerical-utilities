This is num-utils.info, produced by makeinfo version 6.8 from
num-utils.texi.

     Copyright © 2019-2022 Steven Nunez

     Permission is granted to make and distribute verbatim copies of
     this manual provided the copyright notice and this permission
     notice are preserved on all copies.

     Permission is granted to copy and distribute modified versions of
     this manual under the conditions for verbatim copying, provided
     also that the section entitled “Copying” is included exactly as in
     the original.

     Permission is granted to copy and distribute translations of this
     manual into another language, under the above conditions for
     modified versions, except that this permission notice may be
     translated as well.
INFO-DIR-SECTION Common Lisp
START-INFO-DIR-ENTRY
* NUM-UTILS Reference Manual: (num-utils). The NUM-UTILS Reference Manual.
END-INFO-DIR-ENTRY


File: num-utils.info,  Node: Top,  Next: Copying,  Prev: (dir),  Up: (dir)

The NUM-UTILS Reference Manual
******************************

This is the NUM-UTILS Reference Manual, version 1.3.0, generated
automatically by Declt version 4.0b2.

* Menu:

* Copying:: The Microsoft Public License
* Systems:: The systems documentation
* Files:: The files documentation
* Packages:: The packages documentation
* Definitions:: The symbols documentation
* Indexes:: Concepts, functions, variables and data types

     Copyright © 2019-2022 Steven Nunez

     Permission is granted to make and distribute verbatim copies of
     this manual provided the copyright notice and this permission
     notice are preserved on all copies.

     Permission is granted to copy and distribute modified versions of
     this manual under the conditions for verbatim copying, provided
     also that the section entitled “Copying” is included exactly as in
     the original.

     Permission is granted to copy and distribute translations of this
     manual into another language, under the above conditions for
     modified versions, except that this permission notice may be
     translated as well.


File: num-utils.info,  Node: Copying,  Next: Systems,  Prev: Top,  Up: Top

Copying
*******

     This program is distributed under the terms of the Microsoft Public
     License.


File: num-utils.info,  Node: Systems,  Next: Files,  Prev: Copying,  Up: Top

1 Systems
*********

The main system appears first, followed by any subsystem dependency.

* Menu:

* The num-utils system::


File: num-utils.info,  Node: The num-utils system,  Prev: Systems,  Up: Systems

1.1 num-utils
=============

Numerical utilities for Common Lisp
*Long Name*
     Numerical Utilities
*Author*
     Steven Nunez <<steve@symbolics.tech>>
*Source Control*
     (GIT https://github.com/Lisp-Stat/numerical-utilities.git)
*Bug Tracker*
     <https://github.com/Lisp-Stat/numerical-utilities/issues>
*License*
     MS-PL
*Long Description*
     This library implements simple numerical functions for Common Lisp,
     including

     num=, a comparison operator for floats
     simple arithmeric functions, like sum and l2norm
     elementwise operations for arrays
     intervals
     special matrices and shorthand for their input
     sample statistics
     Chebyshev polynomials
     univariate rootfinding
*Version*
     1.3.0
*Dependencies*
        • anaphora (system).
        • alexandria (system).
        • array-operations (system).
        • select (system).
        • let-plus (system).
*Source*
     *note num-utils.asd: ❨2❩.
*Child Components*
        • *note packages.lisp: ❨3❩. (file).
        • *note utilities.lisp: ❨4❩. (file).
        • *note num=.lisp: ❨5❩. (file).
        • *note arithmetic.lisp: ❨6❩. (file).
        • *note elementwise.lisp: ❨7❩. (file).
        • *note extended-real.lisp: ❨8❩. (file).
        • *note interval.lisp: ❨9❩. (file).
        • *note print-matrix.lisp: ❨10❩. (file).
        • *note matrix.lisp: ❨11❩. (file).
        • *note matrix-shorthand.lisp: ❨12❩. (file).
        • *note chebyshev.lisp: ❨13❩. (file).
        • *note polynomial.lisp: ❨14❩. (file).
        • *note rootfinding.lisp: ❨15❩. (file).
        • *note quadrature.lisp: ❨16❩. (file).
        • *note log-exp.lisp: ❨17❩. (file).
        • *note test-utilities.lisp: ❨18❩. (file).
        • *note pkgdcl.lisp: ❨19❩. (file).


File: num-utils.info,  Node: Files,  Next: Packages,  Prev: Systems,  Up: Top

2 Files
*******

Files are sorted by type and then listed depth-first from the systems
components trees.

* Menu:

* Lisp files::


File: num-utils.info,  Node: Lisp files,  Prev: Files,  Up: Files

2.1 Lisp
========

* Menu:

* The num-utils/num-utils․asd file::
* The num-utils/packages․lisp file::
* The num-utils/utilities․lisp file::
* The num-utils/num=․lisp file::
* The num-utils/arithmetic․lisp file::
* The num-utils/elementwise․lisp file::
* The num-utils/extended-real․lisp file::
* The num-utils/interval․lisp file::
* The num-utils/print-matrix․lisp file::
* The num-utils/matrix․lisp file::
* The num-utils/matrix-shorthand․lisp file::
* The num-utils/chebyshev․lisp file::
* The num-utils/polynomial․lisp file::
* The num-utils/rootfinding․lisp file::
* The num-utils/quadrature․lisp file::
* The num-utils/log-exp․lisp file::
* The num-utils/test-utilities․lisp file::
* The num-utils/pkgdcl․lisp file::


File: num-utils.info,  Node: The num-utils/num-utils․asd file,  Next: The num-utils/packages․lisp file,  Prev: Lisp files,  Up: Lisp files

2.1.1 num-utils/num-utils.asd
-----------------------------

*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*ASDF Systems*
     *note num-utils: ❨1❩.


File: num-utils.info,  Node: The num-utils/packages․lisp file,  Next: The num-utils/utilities․lisp file,  Prev: The num-utils/num-utils․asd file,  Up: Lisp files

2.1.2 num-utils/packages.lisp
-----------------------------

*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*Packages*
        • *note num-utils.quadrature: ❨20❩.
        • *note num-utils.print-matrix: ❨21❩.
        • *note num-utils.chebyshev: ❨22❩.
        • *note num-utils.interval: ❨23❩.
        • *note num-utils.matrix-shorthand: ❨24❩.
        • *note num-utils.log-exp: ❨25❩.
        • *note num-utils.matrix: ❨26❩.
        • *note num-utils.extended-real: ❨27❩.
        • *note num-utils.utilities: ❨28❩.
        • *note num-utils.test-utilities: ❨29❩.
        • *note num-utils.arithmetic: ❨30❩.
        • *note num-utils.elementwise: ❨31❩.
        • *note num-utils.num=: ❨32❩.
        • *note num-utils.polynomial: ❨33❩.
        • *note num-utils.rootfinding: ❨35❩.


File: num-utils.info,  Node: The num-utils/utilities․lisp file,  Next: The num-utils/num=․lisp file,  Prev: The num-utils/packages․lisp file,  Up: Lisp files

2.1.3 num-utils/utilities.lisp
------------------------------

*Dependency*
     *note packages.lisp: ❨3❩. (file).
*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*Public Interface*
        • *note as-alist: ❨287❩. (generic function).
        • *note as-bit-vector: ❨312❩. (function).
        • *note as-double-float: ❨309❩. (function).
        • *note as-plist: ❨304❩. (generic function).
        • *note as-simple-fixnum-vector: ❨301❩. (function).
        • *note bic: ❨286❩. (function).
        • *note binary-search: ❨292❩. (function).
        • *note check-types: ❨290❩. (macro).
        • *note curry*: ❨302❩. (macro).
        • *note define-with-multiple-bindings: ❨293❩. (macro).
        • *note distinct: ❨310❩. (function).
        • *note expanding: ❨303❩. (macro).
        • *note fixnum?: ❨299❩. (function).
        • *note generate-sequence: ❨308❩. (function).
        • *note gethash*: ❨300❩. (macro).
        • *note make-vector: ❨288❩. (compiler macro).
        • *note make-vector: ❨289❩. (function).
        • *note monotonicp: ❨296❩. (function).
        • *note simple-boolean-vector: ❨298❩. (type).
        • *note simple-double-float-vector: ❨295❩. (type).
        • *note simple-fixnum-vector: ❨294❩. (type).
        • *note simple-single-float-vector: ❨306❩. (type).
        • *note splice-awhen: ❨311❩. (macro).
        • *note splice-when: ❨307❩. (macro).
        • *note with-double-floats: ❨291❩. (macro).
        • *note within?: ❨297❩. (function).
*Internals*
        • *note boolean-sequence-p: ❨314❩. (function).
        • *note boolean?: ❨313❩. (function).


File: num-utils.info,  Node: The num-utils/num=․lisp file,  Next: The num-utils/arithmetic․lisp file,  Prev: The num-utils/utilities․lisp file,  Up: Lisp files

2.1.4 num-utils/num=.lisp
-------------------------

*Dependency*
     *note utilities.lisp: ❨4❩. (file).
*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*Public Interface*
        • *note *num=-tolerance*: ❨594❩. (special variable).
        • *note define-num=-with-accessors: ❨581❩. (macro).
        • *note define-structure-num=: ❨580❩. (macro).
        • *note num-delta: ❨582❩. (function).
        • *note num=: ❨583❩. (generic function).
        • *note num=-function: ❨593❩. (function).


File: num-utils.info,  Node: The num-utils/arithmetic․lisp file,  Next: The num-utils/elementwise․lisp file,  Prev: The num-utils/num=․lisp file,  Up: Lisp files

2.1.5 num-utils/arithmetic.lisp
-------------------------------

*Dependency*
     *note num=.lisp: ❨5❩. (file).
*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*Public Interface*
        • *note 1c: ❨371❩. (function).
        • *note abs-diff: ❨348❩. (function).
        • *note absolute-square: ❨354❩. (function).
        • *note as-integer: ❨366❩. (function).
        • *note ceiling*: ❨373❩. (function).
        • *note cube: ❨370❩. (function).
        • *note cumulative-product: ❨369❩. (function).
        • *note cumulative-sum: ❨372❩. (function).
        • *note divides?: ❨368❩. (function).
        • *note floor*: ❨357❩. (function).
        • *note ivec: ❨365❩. (function).
        • *note l2norm: ❨364❩. (function).
        • *note l2norm-square: ❨346❩. (generic function).
        • *note log10: ❨374❩. (function).
        • *note log2: ❨367❩. (function).
        • *note normalize-probabilities: ❨352❩. (function).
        • *note numseq: ❨375❩. (function).
        • *note product: ❨359❩. (generic function).
        • *note round*: ❨362❩. (function).
        • *note same-sign-p: ❨363❩. (function).
        • *note sequence-maximum: ❨353❩. (function).
        • *note sequence-minimum: ❨356❩. (function).
        • *note square: ❨358❩. (function).
        • *note sum: ❨349❩. (generic function).
        • *note truncate*: ❨355❩. (function).
*Internals*
        • *note define-rounding-with-offset: ❨379❩. (macro).
        • *note ln: ❨378❩. (function).
        • *note similar-element-type: ❨377❩. (function).
        • *note similar-sequence-type: ❨376❩. (function).


File: num-utils.info,  Node: The num-utils/elementwise․lisp file,  Next: The num-utils/extended-real․lisp file,  Prev: The num-utils/arithmetic․lisp file,  Up: Lisp files

2.1.6 num-utils/elementwise.lisp
--------------------------------

*Dependency*
     *note arithmetic.lisp: ❨6❩. (file).
*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*Public Interface*
        • *note e*: ❨402❩. (function).
        • *note e+: ❨557❩. (function).
        • *note e-: ❨500❩. (function).
        • *note e/: ❨498❩. (function).
        • *note e1-: ❨460❩. (generic function).
        • *note e1/: ❨384❩. (generic function).
        • *note e1log: ❨542❩. (generic function).
        • *note e2*: ❨411❩. (generic function).
        • *note e2+: ❨513❩. (generic function).
        • *note e2-: ❨483❩. (generic function).
        • *note e2/: ❨467❩. (generic function).
        • *note e2<: ❨433❩. (generic function).
        • *note e2<=: ❨452❩. (generic function).
        • *note e2=: ❨549❩. (generic function).
        • *note e2>: ❨444❩. (generic function).
        • *note e2>=: ❨527❩. (generic function).
        • *note e2log: ❨561❩. (generic function).
        • *note eceiling: ❨569❩. (generic function).
        • *note econjugate: ❨441❩. (generic function).
        • *note ecos: ❨399❩. (generic function).
        • *note eexp: ❨535❩. (generic function).
        • *note eexpt: ❨391❩. (generic function).
        • *note efloor: ❨558❩. (generic function).
        • *note elementwise-float-contagion: ❨501❩. (function).
        • *note elog: ❨410❩. (function).
        • *note emax: ❨499❩. (function).
        • *note emin: ❨497❩. (function).
        • *note emod: ❨502❩. (generic function).
        • *note ereduce: ❨380❩. (generic function).
        • *note esin: ❨510❩. (generic function).
        • *note esqrt: ❨403❩. (generic function).
*Internals*
        • *note define-e&: ❨577❩. (macro).
        • *note define-e1: ❨576❩. (macro).
        • *note define-e2: ❨572❩. (macro).
        • *note define-elementwise-reduction: ❨578❩. (macro).
        • *note esquare: ❨573❩. (generic function).
        • *note mapping-array: ❨579❩. (macro).


File: num-utils.info,  Node: The num-utils/extended-real․lisp file,  Next: The num-utils/interval․lisp file,  Prev: The num-utils/elementwise․lisp file,  Up: Lisp files

2.1.7 num-utils/extended-real.lisp
----------------------------------

*Dependency*
     *note elementwise.lisp: ❨7❩. (file).
*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*Public Interface*
        • *note <: ❨281❩. (function).
        • *note <=: ❨274❩. (function).
        • *note =: ❨282❩. (function).
        • *note >: ❨277❩. (function).
        • *note >=: ❨280❩. (function).
        • *note extended-real: ❨278❩. (type).
        • *note infinite?: ❨276❩. (function).
        • *note lambda-template: ❨275❩. (macro).
        • *note with-template: ❨279❩. (macro).
*Internals*
        • *note define-comparison: ❨285❩. (macro).
        • *note extend-pairwise-comparison: ❨284❩. (function).
        • *note infinite: ❨283❩. (type).


File: num-utils.info,  Node: The num-utils/interval․lisp file,  Next: The num-utils/print-matrix․lisp file,  Prev: The num-utils/extended-real․lisp file,  Up: Lisp files

2.1.8 num-utils/interval.lisp
-----------------------------

*Dependency*
     *note extended-real.lisp: ❨8❩. (file).
*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*Public Interface*
        • *note &interval: ❨153❩. (macro).
        • *note extend-interval: ❨138❩. (generic function).
        • *note extendf-interval: ❨134❩. (macro).
        • *note finite-interval: ❨172❩. (class).
        • *note grid-in: ❨152❩. (function).
        • *note in-interval?: ❨133❩. (function).
        • *note initialize-instance: ❨630❩. (method).
        • *note interval: ❨169❩. (function).
        • *note interval: ❨170❩. (class).
        • *note interval-hull: ❨167❩. (function).
        • *note interval-length: ❨151❩. (function).
        • *note interval-midpoint: ❨176❩. (function).
        • *note left: ❨155❩. (generic function).
        • *note minusinf-interval: ❨171❩. (class).
        • *note num=: ❨586❩. (method).
        • *note num=: ❨587❩. (method).
        • *note open-left?: ❨135❩. (generic function).
        • *note open-right?: ❨173❩. (generic function).
        • *note plusinf-interval: ❨150❩. (class).
        • *note plusminus-interval: ❨168❩. (function).
        • *note print-object: ❨629❩. (method).
        • *note real-line: ❨148❩. (class).
        • *note relative: ❨159❩. (function).
        • *note relative: ❨160❩. (structure).
        • *note right: ❨164❩. (generic function).
        • *note shift-interval: ❨162❩. (generic function).
        • *note shrink-interval: ❨158❩. (function).
        • *note spacer: ❨145❩. (function).
        • *note spacer: ❨146❩. (structure).
        • *note split-interval: ❨154❩. (function).
        • *note subintervals-in: ❨149❩. (function).
*Internals*
        • *note copy-relative: ❨195❩. (function).
        • *note copy-spacer: ❨186❩. (function).
        • *note interval/finite-left: ❨190❩. (class).
        • *note interval/finite-right: ❨187❩. (class).
        • *note interval/infinite-left: ❨182❩. (class).
        • *note interval/infinite-right: ❨196❩. (class).
        • *note print-left-endpoint: ❨183❩. (generic function).
        • *note print-right-endpoint: ❨179❩. (generic function).
        • *note relative-fraction: ❨178❩. (reader).
        • *note relative-p: ❨193❩. (function).
        • *note spacer-p: ❨177❩. (function).
        • *note spacer-weight: ❨194❩. (reader).


File: num-utils.info,  Node: The num-utils/print-matrix․lisp file,  Next: The num-utils/matrix․lisp file,  Prev: The num-utils/interval․lisp file,  Up: Lisp files

2.1.9 num-utils/print-matrix.lisp
---------------------------------

*Dependency*
     *note interval.lisp: ❨9❩. (file).
*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*Public Interface*
        • *note *print-matrix-precision*: ❨117❩. (special variable).
        • *note print-length-truncate: ❨119❩. (function).
        • *note print-matrix: ❨118❩. (function).
*Internals*
     *note print-matrix-formatter: ❨120❩. (function).


File: num-utils.info,  Node: The num-utils/matrix․lisp file,  Next: The num-utils/matrix-shorthand․lisp file,  Prev: The num-utils/print-matrix․lisp file,  Up: Lisp files

2.1.10 num-utils/matrix.lisp
----------------------------

*Dependency*
     *note print-matrix.lisp: ❨10❩. (file).
*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*Public Interface*
        • *note as-array: ❨633❩. (method).
        • *note as-array: ❨636❩. (method).
        • *note as-array: ❨642❩. (method).
        • *note as-array: ❨645❩. (method).
        • *note diagonal-matrix: ❨235❩. (function).
        • *note diagonal-matrix: ❨236❩. (structure).
        • *note diagonal-matrix-elements: ❨231❩. (reader).
        • *note (setf diagonal-matrix-elements): ❨232❩. (writer).
        • *note diagonal-vector: ❨223❩. (generic function).
        • *note (setf diagonal-vector): ❨226❩. (generic function).
        • *note dims: ❨638❩. (method).
        • *note dims: ❨643❩. (method).
        • *note e1-: ❨461❩. (method).
        • *note e1-: ❨462❩. (method).
        • *note e1-: ❨463❩. (method).
        • *note e1-: ❨464❩. (method).
        • *note e1/: ❨385❩. (method).
        • *note e1/: ❨386❩. (method).
        • *note e1/: ❨387❩. (method).
        • *note e1/: ❨388❩. (method).
        • *note e1log: ❨543❩. (method).
        • *note e1log: ❨544❩. (method).
        • *note e1log: ❨545❩. (method).
        • *note e1log: ❨546❩. (method).
        • *note e2*: ❨412❩. (method).
        • *note e2*: ❨413❩. (method).
        • *note e2*: ❨414❩. (method).
        • *note e2*: ❨415❩. (method).
        • *note e2*: ❨416❩. (method).
        • *note e2*: ❨417❩. (method).
        • *note e2*: ❨418❩. (method).
        • *note e2*: ❨419❩. (method).
        • *note e2*: ❨420❩. (method).
        • *note e2*: ❨421❩. (method).
        • *note e2*: ❨422❩. (method).
        • *note e2*: ❨423❩. (method).
        • *note e2*: ❨424❩. (method).
        • *note e2*: ❨425❩. (method).
        • *note e2+: ❨514❩. (method).
        • *note e2+: ❨515❩. (method).
        • *note e2+: ❨516❩. (method).
        • *note e2+: ❨517❩. (method).
        • *note e2+: ❨518❩. (method).
        • *note e2+: ❨519❩. (method).
        • *note e2-: ❨484❩. (method).
        • *note e2-: ❨485❩. (method).
        • *note e2-: ❨486❩. (method).
        • *note e2-: ❨487❩. (method).
        • *note e2-: ❨488❩. (method).
        • *note e2-: ❨489❩. (method).
        • *note e2/: ❨468❩. (method).
        • *note e2/: ❨469❩. (method).
        • *note e2/: ❨470❩. (method).
        • *note e2/: ❨471❩. (method).
        • *note e2/: ❨472❩. (method).
        • *note e2/: ❨473❩. (method).
        • *note e2/: ❨474❩. (method).
        • *note e2/: ❨475❩. (method).
        • *note eexp: ❨536❩. (method).
        • *note eexp: ❨537❩. (method).
        • *note eexp: ❨538❩. (method).
        • *note eexp: ❨539❩. (method).
        • *note element-type: ❨639❩. (method).
        • *note element-type: ❨644❩. (method).
        • *note esqrt: ❨404❩. (method).
        • *note esqrt: ❨405❩. (method).
        • *note esqrt: ❨406❩. (method).
        • *note esqrt: ❨407❩. (method).
        • *note hermitian-matrix: ❨221❩. (function).
        • *note hermitian-matrix: ❨222❩. (structure).
        • *note lower-triangular-matrix: ❨233❩. (function).
        • *note lower-triangular-matrix: ❨234❩. (structure).
        • *note map-array: ❨220❩. (method).
        • *note num=: ❨584❩. (method).
        • *note num=: ❨585❩. (method).
        • *note print-object: ❨632❩. (method).
        • *note print-object: ❨635❩. (method).
        • *note print-object: ❨641❩. (method).
        • *note select: ❨631❩. (method).
        • *note select: ❨634❩. (method).
        • *note select: ❨640❩. (method).
        • *note transpose: ❨238❩. (generic function).
        • *note triangular-matrix: ❨216❩. (type).
        • *note upper-triangular-matrix: ❨217❩. (function).
        • *note upper-triangular-matrix: ❨218❩. (structure).
        • *note wrapped-matrix: ❨228❩. (structure).
        • *note wrapped-matrix-elements: ❨230❩. (reader).
*Internals*
        • *note &diagonal-matrix: ❨250❩. (macro).
        • *note &diagonal-matrix-r/o: ❨264❩. (macro).
        • *note above-diagonal?: ❨260❩. (function).
        • *note below-diagonal?: ❨256❩. (function).
        • *note copy-diagonal-matrix: ❨258❩. (function).
        • *note copy-hermitian-matrix: ❨265❩. (function).
        • *note copy-lower-triangular-matrix: ❨244❩. (function).
        • *note copy-upper-triangular-matrix: ❨269❩. (function).
        • *note copy-wrapped-matrix: ❨262❩. (function).
        • *note define-elementwise-as-array: ❨257❩. (macro).
        • *note define-elementwise-same-class: ❨261❩. (macro).
        • *note define-elementwise-univariate: ❨251❩. (macro).
        • *note define-elementwise-with-constant: ❨248❩. (macro).
        • *note define-wrapped-matrix: ❨268❩. (macro).
        • *note diagonal-matrix-p: ❨247❩. (function).
        • *note ensure-valid-elements: ❨273❩. (function).
        • *note hermitian-matrix-elements: ❨249❩. (function).
        • *note hermitian-matrix-p: ❨253❩. (function).
        • *note lower-triangular-matrix-elements: ❨254❩. (function).
        • *note lower-triangular-matrix-p: ❨259❩. (function).
        • *note make-diagonal-matrix: ❨245❩. (function).
        • *note make-hermitian-matrix: ❨266❩. (function).
        • *note make-lower-triangular-matrix: ❨272❩. (function).
        • *note make-upper-triangular-matrix: ❨271❩. (function).
        • *note make-wrapped-matrix: ❨252❩. (function).
        • *note upper-triangular-matrix-elements: ❨246❩. (function).
        • *note upper-triangular-matrix-p: ❨267❩. (function).
        • *note valid-sparse-type?: ❨255❩. (function).
        • *note wrapped-matrix-p: ❨263❩. (function).
        • *note zero-like: ❨270❩. (function).


File: num-utils.info,  Node: The num-utils/matrix-shorthand․lisp file,  Next: The num-utils/chebyshev․lisp file,  Prev: The num-utils/matrix․lisp file,  Up: Lisp files

2.1.11 num-utils/matrix-shorthand.lisp
--------------------------------------

*Dependency*
     *note matrix.lisp: ❨11❩. (file).
*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*Public Interface*
        • *note diagonal-mx: ❨197❩. (function).
        • *note hermitian-mx: ❨201❩. (macro).
        • *note lower-triangular-mx: ❨200❩. (macro).
        • *note mx: ❨202❩. (macro).
        • *note upper-triangular-mx: ❨198❩. (macro).
        • *note vec: ❨199❩. (function).
*Internals*
     *note pad-left-expansion: ❨203❩. (function).


File: num-utils.info,  Node: The num-utils/chebyshev․lisp file,  Next: The num-utils/polynomial․lisp file,  Prev: The num-utils/matrix-shorthand․lisp file,  Up: Lisp files

2.1.12 num-utils/chebyshev.lisp
-------------------------------

*Dependency*
     *note matrix-shorthand.lisp: ❨12❩. (file).
*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*Public Interface*
        • *note chebyshev-approximate: ❨121❩. (function).
        • *note chebyshev-regression: ❨123❩. (function).
        • *note chebyshev-root: ❨122❩. (function).
        • *note chebyshev-roots: ❨124❩. (function).
        • *note evaluate-chebyshev: ❨125❩. (function).
*Internals*
        • *note ab-to-cd-intercept-slope: ❨132❩. (function).
        • *note ab-to-cinf: ❨130❩. (function).
        • *note chebyshev-approximate-implementation: ❨126❩. (generic
          function).
        • *note chebyshev-recursion: ❨131❩. (function).
        • *note cinf-to-ab: ❨129❩. (function).


File: num-utils.info,  Node: The num-utils/polynomial․lisp file,  Next: The num-utils/rootfinding․lisp file,  Prev: The num-utils/chebyshev․lisp file,  Up: Lisp files

2.1.13 num-utils/polynomial.lisp
--------------------------------

*Dependency*
     *note chebyshev.lisp: ❨13❩. (file).
*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*Public Interface*
        • *note evaluate-polynomial: ❨596❩. (function).
        • *note evaluate-rational: ❨595❩. (function).


File: num-utils.info,  Node: The num-utils/rootfinding․lisp file,  Next: The num-utils/quadrature․lisp file,  Prev: The num-utils/polynomial․lisp file,  Up: Lisp files

2.1.14 num-utils/rootfinding.lisp
---------------------------------

*Dependency*
     *note polynomial.lisp: ❨14❩. (file).
*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*Public Interface*
        • *note *rootfinding-delta-relative*: ❨599❩. (special variable).
        • *note *rootfinding-epsilon*: ❨597❩. (special variable).
        • *note root-bisection: ❨598❩. (function).
*Internals*
        • *note narrow-bracket?: ❨604❩. (function).
        • *note near-root?: ❨602❩. (function).
        • *note opposite-sign?: ❨603❩. (function).
        • *note rootfinding-delta: ❨601❩. (function).
        • *note univariate-rootfinder-loop%: ❨600❩. (macro).


File: num-utils.info,  Node: The num-utils/quadrature․lisp file,  Next: The num-utils/log-exp․lisp file,  Prev: The num-utils/rootfinding․lisp file,  Up: Lisp files

2.1.15 num-utils/quadrature.lisp
--------------------------------

*Dependency*
     *note rootfinding.lisp: ❨15❩. (file).
*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*Public Interface*
     *note romberg-quadrature: ❨36❩. (function).
*Internals*
        • *note copy-iterative-quadrature: ❨38❩. (function).
        • *note copy-midpoint-quadrature: ❨56❩. (function).
        • *note copy-richardson-extrapolation: ❨83❩. (function).
        • *note copy-trapezoidal-quadrature: ❨78❩. (function).
        • *note iterative-quadrature: ❨98❩. (structure).
        • *note iterative-quadrature-a: ❨41❩. (reader).
        • *note (setf iterative-quadrature-a): ❨42❩. (writer).
        • *note iterative-quadrature-b: ❨91❩. (reader).
        • *note (setf iterative-quadrature-b): ❨92❩. (writer).
        • *note iterative-quadrature-f: ❨76❩. (reader).
        • *note (setf iterative-quadrature-f): ❨77❩. (writer).
        • *note iterative-quadrature-h: ❨89❩. (reader).
        • *note (setf iterative-quadrature-h): ❨90❩. (writer).
        • *note iterative-quadrature-n: ❨111❩. (reader).
        • *note (setf iterative-quadrature-n): ❨112❩. (writer).
        • *note iterative-quadrature-p: ❨113❩. (function).
        • *note iterative-quadrature-sum: ❨66❩. (reader).
        • *note (setf iterative-quadrature-sum): ❨67❩. (writer).
        • *note make-iterative-quadrature: ❨57❩. (function).
        • *note midpoint-quadrature: ❨85❩. (function).
        • *note midpoint-quadrature: ❨86❩. (structure).
        • *note midpoint-quadrature%: ❨88❩. (function).
        • *note midpoint-quadrature-a: ❨74❩. (function).
        • *note (setf midpoint-quadrature-a): ❨75❩. (function).
        • *note midpoint-quadrature-b: ❨43❩. (function).
        • *note (setf midpoint-quadrature-b): ❨44❩. (function).
        • *note midpoint-quadrature-f: ❨47❩. (function).
        • *note (setf midpoint-quadrature-f): ❨48❩. (function).
        • *note midpoint-quadrature-h: ❨39❩. (function).
        • *note (setf midpoint-quadrature-h): ❨40❩. (function).
        • *note midpoint-quadrature-n: ❨49❩. (function).
        • *note (setf midpoint-quadrature-n): ❨50❩. (function).
        • *note midpoint-quadrature-p: ❨110❩. (function).
        • *note midpoint-quadrature-sum: ❨105❩. (function).
        • *note (setf midpoint-quadrature-sum): ❨106❩. (function).
        • *note refine-quadrature: ❨114❩. (generic function).
        • *note richardson-coefficient: ❨107❩. (generic function).
        • *note richardson-extrapolation: ❨93❩. (function).
        • *note richardson-extrapolation: ❨94❩. (structure).
        • *note richardson-extrapolation-coefficient: ❨64❩. (reader).
        • *note (setf richardson-extrapolation-coefficient): ❨65❩.
          (writer).
        • *note richardson-extrapolation-diagonal: ❨79❩. (reader).
        • *note (setf richardson-extrapolation-diagonal): ❨80❩.
          (writer).
        • *note richardson-extrapolation-n: ❨62❩. (reader).
        • *note (setf richardson-extrapolation-n): ❨63❩. (writer).
        • *note richardson-extrapolation-p: ❨61❩. (function).
        • *note richardson-iteration: ❨84❩. (function).
        • *note romberg-quadrature%: ❨87❩. (function).
        • *note transformed-quadrature: ❨51❩. (generic function).
        • *note trapezoidal-quadrature: ❨58❩. (function).
        • *note trapezoidal-quadrature: ❨59❩. (structure).
        • *note trapezoidal-quadrature%: ❨37❩. (function).
        • *note trapezoidal-quadrature-a: ❨81❩. (function).
        • *note (setf trapezoidal-quadrature-a): ❨82❩. (function).
        • *note trapezoidal-quadrature-b: ❨45❩. (function).
        • *note (setf trapezoidal-quadrature-b): ❨46❩. (function).
        • *note trapezoidal-quadrature-f: ❨70❩. (function).
        • *note (setf trapezoidal-quadrature-f): ❨71❩. (function).
        • *note trapezoidal-quadrature-h: ❨72❩. (function).
        • *note (setf trapezoidal-quadrature-h): ❨73❩. (function).
        • *note trapezoidal-quadrature-n: ❨68❩. (function).
        • *note (setf trapezoidal-quadrature-n): ❨69❩. (function).
        • *note trapezoidal-quadrature-p: ❨60❩. (function).
        • *note trapezoidal-quadrature-sum: ❨54❩. (function).
        • *note (setf trapezoidal-quadrature-sum): ❨55❩. (function).


File: num-utils.info,  Node: The num-utils/log-exp․lisp file,  Next: The num-utils/test-utilities․lisp file,  Prev: The num-utils/quadrature․lisp file,  Up: Lisp files

2.1.16 num-utils/log-exp.lisp
-----------------------------

*Dependency*
     *note quadrature.lisp: ❨16❩. (file).
*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*Public Interface*
        • *note exp-1: ❨204❩. (function).
        • *note exp-1/x: ❨215❩. (function).
        • *note expt-1: ❨214❩. (function).
        • *note hypot: ❨213❩. (function).
        • *note log1+: ❨205❩. (function).
        • *note log1+/x: ❨208❩. (function).
        • *note log1+exp: ❨207❩. (function).
        • *note log1-: ❨206❩. (function).
        • *note log1-exp: ❨210❩. (function).
        • *note log1pmx: ❨209❩. (function).
        • *note log2-exp: ❨212❩. (function).
        • *note logexp-1: ❨211❩. (function).


File: num-utils.info,  Node: The num-utils/test-utilities․lisp file,  Next: The num-utils/pkgdcl․lisp file,  Prev: The num-utils/log-exp․lisp file,  Up: Lisp files

2.1.17 num-utils/test-utilities.lisp
------------------------------------

*Dependency*
     *note log-exp.lisp: ❨17❩. (file).
*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*Public Interface*
        • *note compare-fns: ❨336❩. (function).
        • *note compare-vectors: ❨335❩. (function).
        • *note max-error: ❨331❩. (reader).
        • *note (setf max-error): ❨332❩. (writer).
        • *note mean-error: ❨329❩. (reader).
        • *note (setf mean-error): ❨330❩. (writer).
        • *note min-error: ❨318❩. (reader).
        • *note (setf min-error): ❨319❩. (writer).
        • *note rms: ❨341❩. (reader).
        • *note (setf rms): ❨342❩. (writer).
        • *note test-count: ❨337❩. (reader).
        • *note (setf test-count): ❨338❩. (writer).
        • *note test-fn: ❨317❩. (function).
        • *note test-results: ❨320❩. (structure).
        • *note variance0: ❨333❩. (reader).
        • *note (setf variance0): ❨334❩. (writer).
        • *note variance1: ❨315❩. (reader).
        • *note (setf variance1): ❨316❩. (writer).
        • *note worst-case: ❨339❩. (reader).
        • *note (setf worst-case): ❨340❩. (writer).
*Internals*
        • *note copy-test-results: ❨343❩. (function).
        • *note make-test-results: ❨344❩. (function).
        • *note test-results-p: ❨345❩. (function).


File: num-utils.info,  Node: The num-utils/pkgdcl․lisp file,  Prev: The num-utils/test-utilities․lisp file,  Up: Lisp files

2.1.18 num-utils/pkgdcl.lisp
----------------------------

*Dependency*
     *note test-utilities.lisp: ❨18❩. (file).
*Source*
     *note num-utils.asd: ❨2❩.
*Parent Component*
     *note num-utils: ❨1❩. (system).
*Packages*
     *note num-utils: ❨34❩.


File: num-utils.info,  Node: Packages,  Next: Definitions,  Prev: Files,  Up: Top

3 Packages
**********

Packages are listed by definition order.

* Menu:

* The num-utils․quadrature package::
* The num-utils․print-matrix package::
* The num-utils․chebyshev package::
* The num-utils․interval package::
* The num-utils․matrix-shorthand package::
* The num-utils․log-exp package::
* The num-utils․matrix package::
* The num-utils․extended-real package::
* The num-utils․utilities package::
* The num-utils․test-utilities package::
* The num-utils․arithmetic package::
* The num-utils․elementwise package::
* The num-utils․num= package::
* The num-utils․polynomial package::
* The num-utils package::
* The num-utils․rootfinding package::


File: num-utils.info,  Node: The num-utils․quadrature package,  Next: The num-utils․print-matrix package,  Prev: Packages,  Up: Packages

3.1 num-utils.quadrature
========================

*Source*
     *note packages.lisp: ❨3❩.
*Use List*
        • alexandria.
        • alexandria+.
        • anaphora.
        • common-lisp.
        • let-plus.
        • *note num-utils.arithmetic: ❨30❩.
        • *note num-utils.interval: ❨23❩.
        • *note num-utils.utilities: ❨28❩.
*Used By List*
     *note num-utils: ❨34❩.
*Public Interface*
     *note romberg-quadrature: ❨36❩. (function).
*Internals*
        • *note copy-iterative-quadrature: ❨38❩. (function).
        • *note copy-midpoint-quadrature: ❨56❩. (function).
        • *note copy-richardson-extrapolation: ❨83❩. (function).
        • *note copy-trapezoidal-quadrature: ❨78❩. (function).
        • *note iterative-quadrature: ❨98❩. (structure).
        • *note iterative-quadrature-a: ❨41❩. (reader).
        • *note (setf iterative-quadrature-a): ❨42❩. (writer).
        • *note iterative-quadrature-b: ❨91❩. (reader).
        • *note (setf iterative-quadrature-b): ❨92❩. (writer).
        • *note iterative-quadrature-f: ❨76❩. (reader).
        • *note (setf iterative-quadrature-f): ❨77❩. (writer).
        • *note iterative-quadrature-h: ❨89❩. (reader).
        • *note (setf iterative-quadrature-h): ❨90❩. (writer).
        • *note iterative-quadrature-n: ❨111❩. (reader).
        • *note (setf iterative-quadrature-n): ❨112❩. (writer).
        • *note iterative-quadrature-p: ❨113❩. (function).
        • *note iterative-quadrature-sum: ❨66❩. (reader).
        • *note (setf iterative-quadrature-sum): ❨67❩. (writer).
        • *note make-iterative-quadrature: ❨57❩. (function).
        • *note midpoint-quadrature: ❨85❩. (function).
        • *note midpoint-quadrature: ❨86❩. (structure).
        • *note midpoint-quadrature%: ❨88❩. (function).
        • *note midpoint-quadrature-a: ❨74❩. (function).
        • *note (setf midpoint-quadrature-a): ❨75❩. (function).
        • *note midpoint-quadrature-b: ❨43❩. (function).
        • *note (setf midpoint-quadrature-b): ❨44❩. (function).
        • *note midpoint-quadrature-f: ❨47❩. (function).
        • *note (setf midpoint-quadrature-f): ❨48❩. (function).
        • *note midpoint-quadrature-h: ❨39❩. (function).
        • *note (setf midpoint-quadrature-h): ❨40❩. (function).
        • *note midpoint-quadrature-n: ❨49❩. (function).
        • *note (setf midpoint-quadrature-n): ❨50❩. (function).
        • *note midpoint-quadrature-p: ❨110❩. (function).
        • *note midpoint-quadrature-sum: ❨105❩. (function).
        • *note (setf midpoint-quadrature-sum): ❨106❩. (function).
        • *note refine-quadrature: ❨114❩. (generic function).
        • *note richardson-coefficient: ❨107❩. (generic function).
        • *note richardson-extrapolation: ❨93❩. (function).
        • *note richardson-extrapolation: ❨94❩. (structure).
        • *note richardson-extrapolation-coefficient: ❨64❩. (reader).
        • *note (setf richardson-extrapolation-coefficient): ❨65❩.
          (writer).
        • *note richardson-extrapolation-diagonal: ❨79❩. (reader).
        • *note (setf richardson-extrapolation-diagonal): ❨80❩.
          (writer).
        • *note richardson-extrapolation-n: ❨62❩. (reader).
        • *note (setf richardson-extrapolation-n): ❨63❩. (writer).
        • *note richardson-extrapolation-p: ❨61❩. (function).
        • *note richardson-iteration: ❨84❩. (function).
        • *note romberg-quadrature%: ❨87❩. (function).
        • *note transformed-quadrature: ❨51❩. (generic function).
        • *note trapezoidal-quadrature: ❨58❩. (function).
        • *note trapezoidal-quadrature: ❨59❩. (structure).
        • *note trapezoidal-quadrature%: ❨37❩. (function).
        • *note trapezoidal-quadrature-a: ❨81❩. (function).
        • *note (setf trapezoidal-quadrature-a): ❨82❩. (function).
        • *note trapezoidal-quadrature-b: ❨45❩. (function).
        • *note (setf trapezoidal-quadrature-b): ❨46❩. (function).
        • *note trapezoidal-quadrature-f: ❨70❩. (function).
        • *note (setf trapezoidal-quadrature-f): ❨71❩. (function).
        • *note trapezoidal-quadrature-h: ❨72❩. (function).
        • *note (setf trapezoidal-quadrature-h): ❨73❩. (function).
        • *note trapezoidal-quadrature-n: ❨68❩. (function).
        • *note (setf trapezoidal-quadrature-n): ❨69❩. (function).
        • *note trapezoidal-quadrature-p: ❨60❩. (function).
        • *note trapezoidal-quadrature-sum: ❨54❩. (function).
        • *note (setf trapezoidal-quadrature-sum): ❨55❩. (function).


File: num-utils.info,  Node: The num-utils․print-matrix package,  Next: The num-utils․chebyshev package,  Prev: The num-utils․quadrature package,  Up: Packages

3.2 num-utils.print-matrix
==========================

*Source*
     *note packages.lisp: ❨3❩.
*Use List*
        • alexandria.
        • anaphora.
        • common-lisp.
        • let-plus.
*Used By List*
        • lisp-stat.
        • *note num-utils.matrix: ❨26❩.
*Public Interface*
        • *note *print-matrix-precision*: ❨117❩. (special variable).
        • *note print-length-truncate: ❨119❩. (function).
        • *note print-matrix: ❨118❩. (function).
*Internals*
     *note print-matrix-formatter: ❨120❩. (function).


File: num-utils.info,  Node: The num-utils․chebyshev package,  Next: The num-utils․interval package,  Prev: The num-utils․print-matrix package,  Up: Packages

3.3 num-utils.chebyshev
=======================

*Source*
     *note packages.lisp: ❨3❩.
*Use List*
        • alexandria.
        • anaphora.
        • common-lisp.
        • let-plus.
        • *note num-utils.interval: ❨23❩.
        • *note num-utils.utilities: ❨28❩.
*Used By List*
     *note num-utils: ❨34❩.
*Public Interface*
        • *note chebyshev-approximate: ❨121❩. (function).
        • *note chebyshev-regression: ❨123❩. (function).
        • *note chebyshev-root: ❨122❩. (function).
        • *note chebyshev-roots: ❨124❩. (function).
        • *note evaluate-chebyshev: ❨125❩. (function).
*Internals*
        • *note ab-to-cd-intercept-slope: ❨132❩. (function).
        • *note ab-to-cinf: ❨130❩. (function).
        • *note chebyshev-approximate-implementation: ❨126❩. (generic
          function).
        • *note chebyshev-recursion: ❨131❩. (function).
        • *note cinf-to-ab: ❨129❩. (function).


File: num-utils.info,  Node: The num-utils․interval package,  Next: The num-utils․matrix-shorthand package,  Prev: The num-utils․chebyshev package,  Up: Packages

3.4 num-utils.interval
======================

*Source*
     *note packages.lisp: ❨3❩.
*Use List*
        • alexandria.
        • anaphora.
        • common-lisp.
        • let-plus.
        • *note num-utils.num=: ❨32❩.
        • *note num-utils.utilities: ❨28❩.
*Used By List*
        • *note num-utils: ❨34❩.
        • *note num-utils.chebyshev: ❨22❩.
        • *note num-utils.quadrature: ❨20❩.
        • *note num-utils.rootfinding: ❨35❩.
*Public Interface*
        • *note &interval: ❨153❩. (macro).
        • *note extend-interval: ❨138❩. (generic function).
        • *note extendf-interval: ❨134❩. (macro).
        • *note finite-interval: ❨172❩. (class).
        • *note grid-in: ❨152❩. (function).
        • *note in-interval?: ❨133❩. (function).
        • *note interval: ❨169❩. (function).
        • *note interval: ❨170❩. (class).
        • *note interval-hull: ❨167❩. (function).
        • *note interval-length: ❨151❩. (function).
        • *note interval-midpoint: ❨176❩. (function).
        • *note left: ❨155❩. (generic function).
        • *note minusinf-interval: ❨171❩. (class).
        • *note open-left?: ❨135❩. (generic function).
        • *note open-right?: ❨173❩. (generic function).
        • *note plusinf-interval: ❨150❩. (class).
        • *note plusminus-interval: ❨168❩. (function).
        • *note real-line: ❨148❩. (class).
        • *note relative: ❨159❩. (function).
        • *note relative: ❨160❩. (structure).
        • *note right: ❨164❩. (generic function).
        • *note shift-interval: ❨162❩. (generic function).
        • *note shrink-interval: ❨158❩. (function).
        • *note spacer: ❨145❩. (function).
        • *note spacer: ❨146❩. (structure).
        • *note split-interval: ❨154❩. (function).
        • *note subintervals-in: ❨149❩. (function).
*Internals*
        • *note copy-relative: ❨195❩. (function).
        • *note copy-spacer: ❨186❩. (function).
        • *note interval/finite-left: ❨190❩. (class).
        • *note interval/finite-right: ❨187❩. (class).
        • *note interval/infinite-left: ❨182❩. (class).
        • *note interval/infinite-right: ❨196❩. (class).
        • *note print-left-endpoint: ❨183❩. (generic function).
        • *note print-right-endpoint: ❨179❩. (generic function).
        • *note relative-fraction: ❨178❩. (reader).
        • *note relative-p: ❨193❩. (function).
        • *note spacer-p: ❨177❩. (function).
        • *note spacer-weight: ❨194❩. (reader).


File: num-utils.info,  Node: The num-utils․matrix-shorthand package,  Next: The num-utils․log-exp package,  Prev: The num-utils․interval package,  Up: Packages

3.5 num-utils.matrix-shorthand
==============================

*Source*
     *note packages.lisp: ❨3❩.
*Nickname*
     nu.mx
*Use List*
        • alexandria.
        • anaphora.
        • common-lisp.
        • let-plus.
        • *note num-utils.matrix: ❨26❩.
        • *note num-utils.utilities: ❨28❩.
*Public Interface*
        • *note diagonal-mx: ❨197❩. (function).
        • *note hermitian-mx: ❨201❩. (macro).
        • *note lower-triangular-mx: ❨200❩. (macro).
        • *note mx: ❨202❩. (macro).
        • *note upper-triangular-mx: ❨198❩. (macro).
        • *note vec: ❨199❩. (function).
*Internals*
     *note pad-left-expansion: ❨203❩. (function).


File: num-utils.info,  Node: The num-utils․log-exp package,  Next: The num-utils․matrix package,  Prev: The num-utils․matrix-shorthand package,  Up: Packages

3.6 num-utils.log-exp
=====================

*Source*
     *note packages.lisp: ❨3❩.
*Use List*
        • common-lisp.
        • let-plus.
*Used By List*
     *note num-utils: ❨34❩.
*Public Interface*
        • *note exp-1: ❨204❩. (function).
        • *note exp-1/x: ❨215❩. (function).
        • *note expt-1: ❨214❩. (function).
        • *note hypot: ❨213❩. (function).
        • *note log1+: ❨205❩. (function).
        • *note log1+/x: ❨208❩. (function).
        • *note log1+exp: ❨207❩. (function).
        • *note log1-: ❨206❩. (function).
        • *note log1-exp: ❨210❩. (function).
        • *note log1pmx: ❨209❩. (function).
        • *note log2-exp: ❨212❩. (function).
        • *note logexp-1: ❨211❩. (function).


File: num-utils.info,  Node: The num-utils․matrix package,  Next: The num-utils․extended-real package,  Prev: The num-utils․log-exp package,  Up: Packages

3.7 num-utils.matrix
====================

*Source*
     *note packages.lisp: ❨3❩.
*Use List*
        • alexandria.
        • anaphora.
        • common-lisp.
        • let-plus.
        • *note num-utils.elementwise: ❨31❩.
        • *note num-utils.num=: ❨32❩.
        • *note num-utils.print-matrix: ❨21❩.
        • *note num-utils.utilities: ❨28❩.
        • select.
*Used By List*
        • distributions.
        • *note num-utils: ❨34❩.
        • *note num-utils.matrix-shorthand: ❨24❩.
*Public Interface*
        • *note diagonal-matrix: ❨235❩. (function).
        • *note diagonal-matrix: ❨236❩. (structure).
        • *note diagonal-matrix-elements: ❨231❩. (reader).
        • *note (setf diagonal-matrix-elements): ❨232❩. (writer).
        • *note diagonal-vector: ❨223❩. (generic function).
        • *note (setf diagonal-vector): ❨226❩. (generic function).
        • *note hermitian-matrix: ❨221❩. (function).
        • *note hermitian-matrix: ❨222❩. (structure).
        • *note lower-triangular-matrix: ❨233❩. (function).
        • *note lower-triangular-matrix: ❨234❩. (structure).
        • *note map-array: ❨219❩. (generic function).
        • *note transpose: ❨238❩. (generic function).
        • *note triangular-matrix: ❨216❩. (type).
        • *note upper-triangular-matrix: ❨217❩. (function).
        • *note upper-triangular-matrix: ❨218❩. (structure).
        • *note wrapped-matrix: ❨228❩. (structure).
        • *note wrapped-matrix-elements: ❨230❩. (reader).
*Internals*
        • *note &diagonal-matrix: ❨250❩. (macro).
        • *note &diagonal-matrix-r/o: ❨264❩. (macro).
        • *note above-diagonal?: ❨260❩. (function).
        • *note below-diagonal?: ❨256❩. (function).
        • *note copy-diagonal-matrix: ❨258❩. (function).
        • *note copy-hermitian-matrix: ❨265❩. (function).
        • *note copy-lower-triangular-matrix: ❨244❩. (function).
        • *note copy-upper-triangular-matrix: ❨269❩. (function).
        • *note copy-wrapped-matrix: ❨262❩. (function).
        • *note define-elementwise-as-array: ❨257❩. (macro).
        • *note define-elementwise-same-class: ❨261❩. (macro).
        • *note define-elementwise-univariate: ❨251❩. (macro).
        • *note define-elementwise-with-constant: ❨248❩. (macro).
        • *note define-wrapped-matrix: ❨268❩. (macro).
        • *note diagonal-matrix-p: ❨247❩. (function).
        • *note ensure-valid-elements: ❨273❩. (function).
        • *note hermitian-matrix-elements: ❨249❩. (function).
        • *note hermitian-matrix-p: ❨253❩. (function).
        • *note lower-triangular-matrix-elements: ❨254❩. (function).
        • *note lower-triangular-matrix-p: ❨259❩. (function).
        • *note make-diagonal-matrix: ❨245❩. (function).
        • *note make-hermitian-matrix: ❨266❩. (function).
        • *note make-lower-triangular-matrix: ❨272❩. (function).
        • *note make-upper-triangular-matrix: ❨271❩. (function).
        • *note make-wrapped-matrix: ❨252❩. (function).
        • *note upper-triangular-matrix-elements: ❨246❩. (function).
        • *note upper-triangular-matrix-p: ❨267❩. (function).
        • *note valid-sparse-type?: ❨255❩. (function).
        • *note wrapped-matrix-p: ❨263❩. (function).
        • *note zero-like: ❨270❩. (function).


File: num-utils.info,  Node: The num-utils․extended-real package,  Next: The num-utils․utilities package,  Prev: The num-utils․matrix package,  Up: Packages

3.8 num-utils.extended-real
===========================

*Source*
     *note packages.lisp: ❨3❩.
*Nickname*
     xreal
*Use List*
        • alexandria.
        • common-lisp.
*Public Interface*
        • *note <: ❨281❩. (function).
        • *note <=: ❨274❩. (function).
        • *note =: ❨282❩. (function).
        • *note >: ❨277❩. (function).
        • *note >=: ❨280❩. (function).
        • *note extended-real: ❨278❩. (type).
        • *note infinite?: ❨276❩. (function).
        • *note lambda-template: ❨275❩. (macro).
        • *note with-template: ❨279❩. (macro).
*Internals*
        • *note define-comparison: ❨285❩. (macro).
        • *note extend-pairwise-comparison: ❨284❩. (function).
        • *note infinite: ❨283❩. (type).


File: num-utils.info,  Node: The num-utils․utilities package,  Next: The num-utils․test-utilities package,  Prev: The num-utils․extended-real package,  Up: Packages

3.9 num-utils.utilities
=======================

A collection of utilities to work with floating point values.  Optimised
for double-float.
*Source*
     *note packages.lisp: ❨3❩.
*Use List*
        • alexandria.
        • anaphora.
        • common-lisp.
        • let-plus.
*Used By List*
        • lisp-stat.
        • nu.statistics.
        • *note num-utils: ❨34❩.
        • *note num-utils.arithmetic: ❨30❩.
        • *note num-utils.chebyshev: ❨22❩.
        • *note num-utils.elementwise: ❨31❩.
        • *note num-utils.interval: ❨23❩.
        • *note num-utils.matrix: ❨26❩.
        • *note num-utils.matrix-shorthand: ❨24❩.
        • *note num-utils.polynomial: ❨33❩.
        • *note num-utils.quadrature: ❨20❩.
        • *note num-utils.rootfinding: ❨35❩.
*Public Interface*
        • *note as-alist: ❨287❩. (generic function).
        • *note as-bit-vector: ❨312❩. (function).
        • *note as-double-float: ❨309❩. (function).
        • *note as-plist: ❨304❩. (generic function).
        • *note as-simple-fixnum-vector: ❨301❩. (function).
        • *note bic: ❨286❩. (function).
        • *note binary-search: ❨292❩. (function).
        • *note check-types: ❨290❩. (macro).
        • *note curry*: ❨302❩. (macro).
        • *note define-with-multiple-bindings: ❨293❩. (macro).
        • *note distinct: ❨310❩. (function).
        • *note expanding: ❨303❩. (macro).
        • *note fixnum?: ❨299❩. (function).
        • *note generate-sequence: ❨308❩. (function).
        • *note gethash*: ❨300❩. (macro).
        • *note make-vector: ❨288❩. (compiler macro).
        • *note make-vector: ❨289❩. (function).
        • *note monotonicp: ❨296❩. (function).
        • *note simple-boolean-vector: ❨298❩. (type).
        • *note simple-double-float-vector: ❨295❩. (type).
        • *note simple-fixnum-vector: ❨294❩. (type).
        • *note simple-single-float-vector: ❨306❩. (type).
        • *note splice-awhen: ❨311❩. (macro).
        • *note splice-when: ❨307❩. (macro).
        • *note with-double-floats: ❨291❩. (macro).
        • *note within?: ❨297❩. (function).
*Internals*
        • *note boolean-sequence-p: ❨314❩. (function).
        • *note boolean?: ❨313❩. (function).


File: num-utils.info,  Node: The num-utils․test-utilities package,  Next: The num-utils․arithmetic package,  Prev: The num-utils․utilities package,  Up: Packages

3.10 num-utils.test-utilities
=============================

*Source*
     *note packages.lisp: ❨3❩.
*Use List*
     common-lisp.
*Used By List*
     *note num-utils: ❨34❩.
*Public Interface*
        • *note compare-fns: ❨336❩. (function).
        • *note compare-vectors: ❨335❩. (function).
        • *note max-error: ❨331❩. (reader).
        • *note (setf max-error): ❨332❩. (writer).
        • *note mean-error: ❨329❩. (reader).
        • *note (setf mean-error): ❨330❩. (writer).
        • *note min-error: ❨318❩. (reader).
        • *note (setf min-error): ❨319❩. (writer).
        • *note rms: ❨341❩. (reader).
        • *note (setf rms): ❨342❩. (writer).
        • *note test-count: ❨337❩. (reader).
        • *note (setf test-count): ❨338❩. (writer).
        • *note test-fn: ❨317❩. (function).
        • *note test-results: ❨320❩. (structure).
        • *note variance0: ❨333❩. (reader).
        • *note (setf variance0): ❨334❩. (writer).
        • *note variance1: ❨315❩. (reader).
        • *note (setf variance1): ❨316❩. (writer).
        • *note worst-case: ❨339❩. (reader).
        • *note (setf worst-case): ❨340❩. (writer).
*Internals*
        • *note copy-test-results: ❨343❩. (function).
        • *note make-test-results: ❨344❩. (function).
        • *note test-results-p: ❨345❩. (function).


File: num-utils.info,  Node: The num-utils․arithmetic package,  Next: The num-utils․elementwise package,  Prev: The num-utils․test-utilities package,  Up: Packages

3.11 num-utils.arithmetic
=========================

*Source*
     *note packages.lisp: ❨3❩.
*Use List*
        • alexandria+.
        • alexandria-2.
        • anaphora.
        • common-lisp.
        • let-plus.
        • *note num-utils.utilities: ❨28❩.
*Used By List*
        • lisp-stat.
        • nu.statistics.
        • *note num-utils: ❨34❩.
        • *note num-utils.elementwise: ❨31❩.
        • *note num-utils.quadrature: ❨20❩.
        • special-functions.
*Public Interface*
        • *note 1c: ❨371❩. (function).
        • *note abs-diff: ❨348❩. (function).
        • *note absolute-square: ❨354❩. (function).
        • *note as-integer: ❨366❩. (function).
        • *note ceiling*: ❨373❩. (function).
        • *note cube: ❨370❩. (function).
        • *note cumulative-product: ❨369❩. (function).
        • *note cumulative-sum: ❨372❩. (function).
        • *note divides?: ❨368❩. (function).
        • *note floor*: ❨357❩. (function).
        • *note ivec: ❨365❩. (function).
        • *note l2norm: ❨364❩. (function).
        • *note l2norm-square: ❨346❩. (generic function).
        • *note log10: ❨374❩. (function).
        • *note log2: ❨367❩. (function).
        • *note normalize-probabilities: ❨352❩. (function).
        • *note numseq: ❨375❩. (function).
        • *note product: ❨359❩. (generic function).
        • *note round*: ❨362❩. (function).
        • *note same-sign-p: ❨363❩. (function).
        • *note sequence-maximum: ❨353❩. (function).
        • *note sequence-minimum: ❨356❩. (function).
        • *note square: ❨358❩. (function).
        • *note sum: ❨104❩. (slot).
        • *note sum: ❨349❩. (generic function).
        • *note truncate*: ❨355❩. (function).
*Internals*
        • *note define-rounding-with-offset: ❨379❩. (macro).
        • *note ln: ❨378❩. (function).
        • *note similar-element-type: ❨377❩. (function).
        • *note similar-sequence-type: ❨376❩. (function).


File: num-utils.info,  Node: The num-utils․elementwise package,  Next: The num-utils․num= package,  Prev: The num-utils․arithmetic package,  Up: Packages

3.12 num-utils.elementwise
==========================

*Source*
     *note packages.lisp: ❨3❩.
*Nickname*
     elmt
*Use List*
        • alexandria.
        • common-lisp.
        • let-plus.
        • *note num-utils.arithmetic: ❨30❩.
        • *note num-utils.utilities: ❨28❩.
*Used By List*
        • distributions.
        • lisp-stat.
        • *note num-utils: ❨34❩.
        • *note num-utils.matrix: ❨26❩.
*Public Interface*
        • *note e*: ❨402❩. (function).
        • *note e+: ❨557❩. (function).
        • *note e-: ❨500❩. (function).
        • *note e/: ❨498❩. (function).
        • *note e1-: ❨460❩. (generic function).
        • *note e1/: ❨384❩. (generic function).
        • *note e1log: ❨542❩. (generic function).
        • *note e2*: ❨411❩. (generic function).
        • *note e2+: ❨513❩. (generic function).
        • *note e2-: ❨483❩. (generic function).
        • *note e2/: ❨467❩. (generic function).
        • *note e2<: ❨433❩. (generic function).
        • *note e2<=: ❨452❩. (generic function).
        • *note e2=: ❨549❩. (generic function).
        • *note e2>: ❨444❩. (generic function).
        • *note e2>=: ❨527❩. (generic function).
        • *note e2log: ❨561❩. (generic function).
        • *note eceiling: ❨569❩. (generic function).
        • *note econjugate: ❨441❩. (generic function).
        • *note ecos: ❨399❩. (generic function).
        • *note eexp: ❨535❩. (generic function).
        • *note eexpt: ❨391❩. (generic function).
        • *note efloor: ❨558❩. (generic function).
        • *note elementwise-float-contagion: ❨501❩. (function).
        • *note elog: ❨410❩. (function).
        • *note emax: ❨499❩. (function).
        • *note emin: ❨497❩. (function).
        • *note emod: ❨502❩. (generic function).
        • *note ereduce: ❨380❩. (generic function).
        • *note esin: ❨510❩. (generic function).
        • *note esqrt: ❨403❩. (generic function).
*Internals*
        • *note define-e&: ❨577❩. (macro).
        • *note define-e1: ❨576❩. (macro).
        • *note define-e2: ❨572❩. (macro).
        • *note define-elementwise-reduction: ❨578❩. (macro).
        • *note esquare: ❨573❩. (generic function).
        • *note mapping-array: ❨579❩. (macro).


File: num-utils.info,  Node: The num-utils․num= package,  Next: The num-utils․polynomial package,  Prev: The num-utils․elementwise package,  Up: Packages

3.13 num-utils.num=
===================

*Source*
     *note packages.lisp: ❨3❩.
*Use List*
        • alexandria.
        • anaphora.
        • common-lisp.
        • let-plus.
*Used By List*
        • distributions.
        • nu.statistics.
        • *note num-utils: ❨34❩.
        • *note num-utils.interval: ❨23❩.
        • *note num-utils.matrix: ❨26❩.
*Public Interface*
        • *note *num=-tolerance*: ❨594❩. (special variable).
        • *note define-num=-with-accessors: ❨581❩. (macro).
        • *note define-structure-num=: ❨580❩. (macro).
        • *note num-delta: ❨582❩. (function).
        • *note num=: ❨583❩. (generic function).
        • *note num=-function: ❨593❩. (function).


File: num-utils.info,  Node: The num-utils․polynomial package,  Next: The num-utils package,  Prev: The num-utils․num= package,  Up: Packages

3.14 num-utils.polynomial
=========================

Efficient evaluation of polynomial functions using Horner’s method
*Source*
     *note packages.lisp: ❨3❩.
*Nickname*
     poly
*Use List*
        • alexandria.
        • common-lisp.
        • *note num-utils.utilities: ❨28❩.
*Used By List*
        • *note num-utils: ❨34❩.
        • special-functions.
*Public Interface*
        • *note evaluate-polynomial: ❨596❩. (function).
        • *note evaluate-rational: ❨595❩. (function).


File: num-utils.info,  Node: The num-utils package,  Next: The num-utils․rootfinding package,  Prev: The num-utils․polynomial package,  Up: Packages

3.15 num-utils
==============

Numerical utilities for Lisp-Stat
*Source*
     *note pkgdcl.lisp: ❨19❩.
*Nickname*
     nu
*Use List*
        • common-lisp.
        • *note num-utils.arithmetic: ❨30❩.
        • *note num-utils.chebyshev: ❨22❩.
        • *note num-utils.elementwise: ❨31❩.
        • *note num-utils.interval: ❨23❩.
        • *note num-utils.log-exp: ❨25❩.
        • *note num-utils.matrix: ❨26❩.
        • *note num-utils.num=: ❨32❩.
        • *note num-utils.polynomial: ❨33❩.
        • *note num-utils.quadrature: ❨20❩.
        • *note num-utils.rootfinding: ❨35❩.
        • *note num-utils.test-utilities: ❨29❩.
        • *note num-utils.utilities: ❨28❩.


File: num-utils.info,  Node: The num-utils․rootfinding package,  Prev: The num-utils package,  Up: Packages

3.16 num-utils.rootfinding
==========================

*Source*
     *note packages.lisp: ❨3❩.
*Use List*
        • alexandria.
        • common-lisp.
        • let-plus.
        • *note num-utils.interval: ❨23❩.
        • *note num-utils.utilities: ❨28❩.
*Used By List*
     *note num-utils: ❨34❩.
*Public Interface*
        • *note *rootfinding-delta-relative*: ❨599❩. (special variable).
        • *note *rootfinding-epsilon*: ❨597❩. (special variable).
        • *note root-bisection: ❨598❩. (function).
*Internals*
        • *note narrow-bracket?: ❨604❩. (function).
        • *note near-root?: ❨602❩. (function).
        • *note opposite-sign?: ❨603❩. (function).
        • *note rootfinding-delta: ❨601❩. (function).
        • *note univariate-rootfinder-loop%: ❨600❩. (macro).


File: num-utils.info,  Node: Definitions,  Next: Indexes,  Prev: Packages,  Up: Top

4 Definitions
*************

Definitions are sorted by export status, category, package, and then by
lexicographic order.

* Menu:

* Public Interface::
* Internals::


File: num-utils.info,  Node: Public Interface,  Next: Internals,  Prev: Definitions,  Up: Definitions

4.1 Public Interface
====================

* Menu:

* Public special variables::
* Public macros::
* Public compiler macros::
* Public ordinary functions::
* Public generic functions::
* Public standalone methods::
* Public structures::
* Public classes::
* Public types::


File: num-utils.info,  Node: Public special variables,  Next: Public macros,  Prev: Public Interface,  Up: Public Interface

4.1.1 Special variables
-----------------------

 -- Special Variable: *num=-tolerance*
     Default tolerance for NUM=.
     *Package*
          *note num-utils.num=: ❨32❩.
     *Source*
          *note num=.lisp: ❨5❩.
 -- Special Variable: *print-matrix-precision*
     Number of digits after the decimal point when printing numeric
     matrices.
     *Package*
          *note num-utils.print-matrix: ❨21❩.
     *Source*
          *note print-matrix.lisp: ❨10❩.
 -- Special Variable: *rootfinding-delta-relative*
     Default relative interval width for rootfinding.
     *Package*
          *note num-utils.rootfinding: ❨35❩.
     *Source*
          *note rootfinding.lisp: ❨15❩.
 -- Special Variable: *rootfinding-epsilon*
     Default maximum for the absolute value of the function, used for
     rootfinding.
     *Package*
          *note num-utils.rootfinding: ❨35❩.
     *Source*
          *note rootfinding.lisp: ❨15❩.


File: num-utils.info,  Node: Public macros,  Next: Public compiler macros,  Prev: Public special variables,  Up: Public Interface

4.1.2 Macros
------------

 -- Macro: &interval (left right)
     LET+ expansion for interval endpoints.  If given a list of two
     values, the second value is an indicator for whether the endpoint
     is open.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Macro: check-types ((&rest arguments) type)
     CHECK-TYPE for multiple places of the same type.  Each argument is
     either a place, or a list of a place and a type-string.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Macro: curry* (function &rest arguments)
     Currying in all variables that are not *.  Note that this is a
     macro, so * should not be quoted, and FUNCTION will be used as is,
     ie it can be a LAMBDA form.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Macro: define-num=-with-accessors (class accessors)
     Define a method for NUM=, specialized to the given class, comparing
     values obtained with accessors.
     *Package*
          *note num-utils.num=: ❨32❩.
     *Source*
          *note num=.lisp: ❨5❩.
 -- Macro: define-structure-num= (structure &rest slots)
     Define a NUM= method for the given structure, comparing the given
     slots.
     *Package*
          *note num-utils.num=: ❨32❩.
     *Source*
          *note num=.lisp: ❨5❩.
 -- Macro: define-with-multiple-bindings (macro &key plural docstring)
     Define a version of MACRO with multiple arguments, given as a list.
     Application of MACRO will be nested.  The new name is the plural of
     the old one (generated using format by default).
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Macro: expanding (&body body)
     Expand BODY. Useful for generating code programmatically.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Macro: extendf-interval (place object)
     Apply EXTEND-INTERVAL on PLACE using OBJECT.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Macro: gethash* (key hash-table &optional datum &rest arguments)
     Like GETHASH, but checking that KEY is present and raising the
     given error if not.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Macro: hermitian-mx (element-type &body rows)
     Macro for creating a lower triangular matrix.  ROWS should be a
     list of lists, elements are evaluated.  Masked elements (above the
     diagonal) are ignored at the expansion, rows which don’t have
     enough elements are padded with zeros.
     *Package*
          *note num-utils.matrix-shorthand: ❨24❩.
     *Source*
          *note matrix-shorthand.lisp: ❨12❩.
 -- Macro: lambda-template ((prefix &rest variables) &body body)
     LAMBDA with WITH-TEMPLATE in its BODY.
     *Package*
          *note num-utils.extended-real: ❨27❩.
     *Source*
          *note extended-real.lisp: ❨8❩.
 -- Macro: lower-triangular-mx (element-type &body rows)
     Macro for creating a lower triangular matrix.  ROWS should be a
     list of lists, elements are evaluated.  Masked elements (above the
     diagonal) are ignored at the expansion, rows which don’t have
     enough elements are padded with zeros.
     *Package*
          *note num-utils.matrix-shorthand: ❨24❩.
     *Source*
          *note matrix-shorthand.lisp: ❨12❩.
 -- Macro: mx (element-type &body rows)
     Macro for creating a (dense) matrix (ie a rank 2 array).  ROWS
     should be a list of lists (or atoms, which are treated as lists),
     elements are evaluated.
     *Package*
          *note num-utils.matrix-shorthand: ❨24❩.
     *Source*
          *note matrix-shorthand.lisp: ❨12❩.
 -- Macro: splice-awhen (test &body forms)
     Similar to splice-when, but binds IT to test.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Macro: splice-when (test &body forms)
     Similar to when, but wraps the result in list.

     Example: ‘(,foo ,@(splice-when add-bar?  bar))
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Macro: upper-triangular-mx (element-type &body rows)
     Macro for creating an upper triangular matrix.  ROWS should be a
     list of lists, elements are evaluated.  Masked elements (below the
     diagonal) are ignored at the expansion.
     *Package*
          *note num-utils.matrix-shorthand: ❨24❩.
     *Source*
          *note matrix-shorthand.lisp: ❨12❩.
 -- Macro: with-double-floats (bindings &body body)
     For each binding = (variable value), coerce VALUE to DOUBLE-FLOAT
     and bind it to VARIABLE for BODY. When VALUE is omitted, VARIABLE
     is used instead.  When BINDING is an atom, it is used for both the
     value and the variable.

     Example:
     (with-double-floats (a
     (b)
     (c 1))
     ...)
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Macro: with-template ((prefix &rest variables) &body body)
     Define the function (PREFIX &rest VARIABLES) which can be used to
     match variables using :PLUSINF, :MINUSINF, REAL, or T.
     *Package*
          *note num-utils.extended-real: ❨27❩.
     *Source*
          *note extended-real.lisp: ❨8❩.


File: num-utils.info,  Node: Public compiler macros,  Next: Public ordinary functions,  Prev: Public macros,  Up: Public Interface

4.1.3 Compiler macros
---------------------

 -- Compiler Macro: make-vector (element-type &rest initial-contents)
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.


File: num-utils.info,  Node: Public ordinary functions,  Next: Public generic functions,  Prev: Public compiler macros,  Up: Public Interface

4.1.4 Ordinary functions
------------------------

 -- Function: 1c (number)
     Return 1-number.  The mnemonic is "1 complement", 1- is already a
     CL library function.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: < (number &rest more-numbers)
     *Package*
          *note num-utils.extended-real: ❨27❩.
     *Source*
          *note extended-real.lisp: ❨8❩.
 -- Function: <= (number &rest more-numbers)
     *Package*
          *note num-utils.extended-real: ❨27❩.
     *Source*
          *note extended-real.lisp: ❨8❩.
 -- Function: = (number &rest more-numbers)
     *Package*
          *note num-utils.extended-real: ❨27❩.
     *Source*
          *note extended-real.lisp: ❨8❩.
 -- Function: > (number &rest more-numbers)
     *Package*
          *note num-utils.extended-real: ❨27❩.
     *Source*
          *note extended-real.lisp: ❨8❩.
 -- Function: >= (number &rest more-numbers)
     *Package*
          *note num-utils.extended-real: ❨27❩.
     *Source*
          *note extended-real.lisp: ❨8❩.
 -- Function: abs-diff (a b)
     Absolute difference of A and B.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: absolute-square (number)
     Number multiplied by its complex conjugate.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: as-bit-vector (v)
     Return a bit vector where each non-nil element of V is mapped to 1
     and each NIL element is mapped to 0
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Function: as-double-float (x)
     Convert argument to DOUBLE-FLOAT.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Function: as-integer (number)
     If NUMBER represents an integer (as an integer, complex, or float,
     etc), return it as an integer, otherwise signal an error.  Floats
     are converted with RATIONALIZE.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: as-simple-fixnum-vector (sequence &optional copy?)
     Convert SEQUENCE to a SIMPLE-FIXNUM-VECTOR. When COPY?, make sure
     that the they don’t share structure.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Function: bic (a b)
     Biconditional.  Returns A <=> B.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Function: binary-search (sorted-reals value)
     Return INDEX such that

     (WITHIN? (AREF SORTED-REALS INDEX) VALUE (AREF SORTED-REALS (1+
     INDEX)).

     SORTED-REALS is assumed to be reals sorted in ascending order (not
     checked, if this does not hold the result may be nonsensical,
     though the algorithm will terminate).

     If value is below (or above) the first (last) break, NIL (T) is
     returned.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Function: ceiling* (number &optional divisor offset)
     Find the lowest A=I*DIVISOR+OFFSET >= NUMBER, return (values A (- A
     NUMBER).
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: chebyshev-approximate (f interval n-polynomials &key
          n-points)
     Return a closure approximating F on the given INTERVAL (may be
     infinite on either end) using the given number of Chebyshev
     polynomials.
     *Package*
          *note num-utils.chebyshev: ❨22❩.
     *Source*
          *note chebyshev.lisp: ❨13❩.
 -- Function: chebyshev-regression (f n-polynomials &optional n-points)
     Chebyshev polynomial regression using the given number of
     polynomials and points (zeroes of the corresponding Chebyshev
     polynomial).
     *Package*
          *note num-utils.chebyshev: ❨22❩.
     *Source*
          *note chebyshev.lisp: ❨13❩.
 -- Function: chebyshev-root (m i)
     Return the iTH root of the Mth Chebyshev polynomial as
     double-float.
     *Package*
          *note num-utils.chebyshev: ❨22❩.
     *Source*
          *note chebyshev.lisp: ❨13❩.
 -- Function: chebyshev-roots (m)
     Return the roots of the Mth Chebyshev polynomial as a vector of
     double-floats.
     *Package*
          *note num-utils.chebyshev: ❨22❩.
     *Source*
          *note chebyshev.lisp: ❨13❩.
 -- Function: compare-fns (fn-1 fn-2 &rest fn-params)
     Compare the values returned by two functions
     *Package*
          *note num-utils.test-utilities: ❨29❩.
     *Source*
          *note test-utilities.lisp: ❨18❩.
 -- Function: compare-vectors (reference-values computed-values)
     Compare two vectors containing the results of previous computations
     *Package*
          *note num-utils.test-utilities: ❨29❩.
     *Source*
          *note test-utilities.lisp: ❨18❩.
 -- Function: cube (number)
     Cube of number.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: cumulative-product (sequence &key result-type)
     Cumulative product of sequence.  Return a sequence of the same kind
     and length; last element is the total product.  The latter is also
     returned as the second value.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: cumulative-sum (sequence &key result-type)
     Cumulative sum of sequence.  Return a sequence of the same kind and
     length; last element is the total.  The latter is returned as the
     second value.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: diagonal-matrix (elements)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Reader: diagonal-matrix-elements (instance)
 -- Writer: (setf diagonal-matrix-elements) (instance)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
     *Target Slot*
          *note elements: ❨237❩.
 -- Function: diagonal-mx (element-type &rest elements)
     Return a DIAGONAL-MATRIX with elements coerced to ELEMENT-TYPE.
     *Package*
          *note num-utils.matrix-shorthand: ❨24❩.
     *Source*
          *note matrix-shorthand.lisp: ❨12❩.
 -- Function: distinct (column)
     Returns the number of distinct elements in COLUMN, a symbol naming
     a variable.  Useful for formatting columns for human output.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Function: divides? (number divisor)
     Test if DIVISOR divides NUMBER without remainder, and if so, return
     the quotient.  Works generally, but makes most sense for rationals.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: e* (argument &rest more-arguments)
     Elementwise *.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
 -- Function: e+ (argument &rest more-arguments)
     Elementwise +.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
 -- Function: e- (argument &rest more-arguments)
     Elementwise -.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
 -- Function: e/ (argument &rest more-arguments)
     Elementwise /.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
 -- Function: elementwise-float-contagion (&rest objects)
     Return the resulting float type when objects (or their elements)
     are combined using arithmetic operations.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
 -- Function: elog (a &optional base)
     Elementwise logarithm.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
 -- Function: emax (object)
     Elementwise MAX.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
 -- Function: emin (object)
     Elementwise MIN.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
 -- Function: evaluate-chebyshev (coefficients x)
     Return the sum of Chebyshev polynomials, weighted by COEFFICIENTS,
     at X.
     *Package*
          *note num-utils.chebyshev: ❨22❩.
     *Source*
          *note chebyshev.lisp: ❨13❩.
 -- Function: evaluate-polynomial (coefficients x)
     Return the sum of polynomials, weighted by COEFFICIENTS, at X.
     COFFICIENTS are ordered from the highest degree down to the
     constant term.  X must be of the same type as COEFFICIENTS.
     *Package*
          *note num-utils.polynomial: ❨33❩.
     *Source*
          *note polynomial.lisp: ❨14❩.
 -- Function: evaluate-rational (numerator denominator z)
     Evaluate a rational function using Horner’s method.  NUMERATOR and
     DENOMINATOR must be equal in size.  These always have a loop and so
     may be less efficient than evaluating a pair of polynomials.
     However, there are some tricks we can use to prevent overflow that
     might otherwise occur in polynomial evaluation if z is large.  This
     is important in our Lanczos code for example.
     N.B. The order of coefficients for this function is NOT the same as
     evaluate-polynomial.
     *Package*
          *note num-utils.polynomial: ❨33❩.
     *Source*
          *note polynomial.lisp: ❨14❩.
 -- Function: exp-1 (x)
     Compute (- (exp x) 1) stably even when X is near 0
     *Package*
          *note num-utils.log-exp: ❨25❩.
     *Source*
          *note log-exp.lisp: ❨17❩.
 -- Function: exp-1/x (x)
     Compute (/ (- (exp x) 1) x) stably even when X is near zero.
     *Package*
          *note num-utils.log-exp: ❨25❩.
     *Source*
          *note log-exp.lisp: ❨17❩.
 -- Function: expt-1 (a z)
     Compute (a^z)-1 stably even when A is close to 1 or Z is close to
     zero.
     *Package*
          *note num-utils.log-exp: ❨25❩.
     *Source*
          *note log-exp.lisp: ❨17❩.
 -- Function: fixnum? (object)
     Check of type of OBJECT is fixnum.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Function: floor* (number &optional divisor offset)
     Find the highest A=I*DIVISOR+OFFSET <= NUMBER, return (values A (-
     A NUMBER).
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: generate-sequence (result-type size function)
     Like MAKE-SEQUENCE, but using a function to fill the result.

     Example to create a sequence of random numbers between 0-1 from the
     uniform distribution: (generate-sequence ’(vector double-float) 100
     (lambda () (random 1.0))).
     Essentially the initial values are ignored when using this
     function.
     See also: aops:generate
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Function: grid-in (interval size &optional sequence-type)
     Return an arithmetic sequence of the given size (length) between
     the endpoints of the interval.  The endpoints of the sequence
     coincide with the respective endpoint of the interval iff it is
     closed.  RESULT-TYPE determines the result type (eg list), if not
     given it is a simple-array (of rank 1), narrowing to the
     appropriate float type or fixnum if possible.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Function: hermitian-matrix (elements)
     Create a lower-triangular-matrix.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: hypot (x y)
     Compute the hypotenuse of X and Y without danger of floating-point
     overflow or underflow.
     *Package*
          *note num-utils.log-exp: ❨25❩.
     *Source*
          *note log-exp.lisp: ❨17❩.
 -- Function: in-interval? (interval number)
     Test if NUMBER is in INTERVAL (which can be NIL, designating the
     empty set).
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Function: infinite? (object)
     Test if an object represents positive or negative infinity.
     *Package*
          *note num-utils.extended-real: ❨27❩.
     *Source*
          *note extended-real.lisp: ❨8❩.
 -- Function: interval (left right &key open-left? open-right?)
     Create an INTERVAL.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Function: interval-hull (object)
     Return the smallest connected interval that contains (elements in)
     OBJECT.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Function: interval-length (interval)
     Difference between left and right.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Function: interval-midpoint (interval &optional alpha)
     Convex combination of left and right, with alpha (defaults to 0.5)
     weight on right.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Function: ivec (end-or-start &optional end by strict-direction?)
     Return a vector of fixnums.

     (ivec end) => #(0 ...  end-1) (or #(0 ...  end+1) when end is
     negative).

     (ivec start end) => #(start ...  end-1) or to end+1 when end is
     negative.

     When BY is given it determines the increment, adjusted to match the
     direction unless STRICT-DIRECTION, in which case an error is
     signalled.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: l2norm (object)
     $L_2$ norm of OBJECT.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: log1+ (x)
     Compute (log (1+ x)) stably even when X is near 0.
     *Package*
          *note num-utils.log-exp: ❨25❩.
     *Source*
          *note log-exp.lisp: ❨17❩.
 -- Function: log1+/x (x)
     Compute (/ (log (+ 1 x)) x) stably even when X is near zero.
     *Package*
          *note num-utils.log-exp: ❨25❩.
     *Source*
          *note log-exp.lisp: ❨17❩.
 -- Function: log1+exp (a)
     Accurately compute log(1+exp(x)) even when A is near zero.
     *Package*
          *note num-utils.log-exp: ❨25❩.
     *Source*
          *note log-exp.lisp: ❨17❩.
 -- Function: log1- (x)
     Compute (log (- 1 x)) stably even when X is near zero.
     *Package*
          *note num-utils.log-exp: ❨25❩.
     *Source*
          *note log-exp.lisp: ❨17❩.
 -- Function: log1-exp (a)
     Compute log(1-exp(x)) stably even when A is near zero.
     This is sometimes known as the E_3, the third Einstein function.
     See Mächler 2008 for notes on accurate calculation.
     https://cran.r-project.org/web/packages/Rmpfr/vignettes/log1mexp-note.pdf
     *Package*
          *note num-utils.log-exp: ❨25❩.
     *Source*
          *note log-exp.lisp: ❨17❩.
 -- Function: log10 (number)
     Abbreviation for decimal logarithm.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: log1pmx (x)
     Compute (- (log (1+ x)) x)
     Accuracy within ~2ulps for -0.227 < x < 0.315
     *Package*
          *note num-utils.log-exp: ❨25❩.
     *Source*
          *note log-exp.lisp: ❨17❩.
 -- Function: log2 (number)
     Abbreviation for binary logarithm.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: log2-exp (x)
     Compute log(2-exp(x)) stably even when X is near zero.
     *Package*
          *note num-utils.log-exp: ❨25❩.
     *Source*
          *note log-exp.lisp: ❨17❩.
 -- Function: logexp-1 (a)
     Compute log(exp(a)-1) stably even when A is small.
     *Package*
          *note num-utils.log-exp: ❨25❩.
     *Source*
          *note log-exp.lisp: ❨17❩.
 -- Function: lower-triangular-matrix (elements)
     Create a lower-triangular-matrix.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: make-vector (element-type &rest initial-contents)
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Reader: max-error (instance)
 -- Writer: (setf max-error) (instance)
     *Package*
          *note num-utils.test-utilities: ❨29❩.
     *Source*
          *note test-utilities.lisp: ❨18❩.
     *Target Slot*
          *note max-error: ❨323❩.
 -- Reader: mean-error (instance)
 -- Writer: (setf mean-error) (instance)
     *Package*
          *note num-utils.test-utilities: ❨29❩.
     *Source*
          *note test-utilities.lisp: ❨18❩.
     *Target Slot*
          *note mean-error: ❨324❩.
 -- Reader: min-error (instance)
 -- Writer: (setf min-error) (instance)
     *Package*
          *note num-utils.test-utilities: ❨29❩.
     *Source*
          *note test-utilities.lisp: ❨18❩.
     *Target Slot*
          *note min-error: ❨322❩.
 -- Function: monotonicp (column)
     Returns T if all elements of COLUMN, a SYMBOL, are increasing
     monotonically Useful for detecting row numbers in imported data.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Function: normalize-probabilities (vector &key element-type result)
     Verify that each element of VECTOR is nonnegative and return a
     vector multiplied so that they sum to 1.  ELEMENT-TYPE can be used
     to specify the element-type of the result.  When RESULT is given,
     the result is placed there.  When RESULT is NIL, VECTOR is modified
     instead.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: num-delta (a b)
     |a-b|/max(1,|a|,|b|).  Useful for comparing numbers.
     *Package*
          *note num-utils.num=: ❨32❩.
     *Source*
          *note num=.lisp: ❨5❩.
 -- Function: num=-function (tolerance)
     Curried version of num=, with given tolerance.
     *Package*
          *note num-utils.num=: ❨32❩.
     *Source*
          *note num=.lisp: ❨5❩.
 -- Function: numseq (from to &key length by type)
     Return a sequence between FROM and TO, progressing by BY, of the
     given LENGTH. Only 3 of these a parameters should be given, the
     missing one (NIL) should be inferred automatically.  The sign of BY
     is adjusted if necessary.  If TYPE is LIST, the result is a list,
     otherwise it determines the element type of the resulting simple
     array.  If TYPE is nil, it as autodetected from the arguments (as a
     FIXNUM, a RATIONAL, or some subtype of FLOAT). Note that the
     implementation may upgrade the element type.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: plusminus-interval (center half-width &key open-left?
          open-right?)
     A symmetric interval around CENTER.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Function: print-length-truncate (dimension)
     Return values (min dimension *print-length*) and whether the
     constraint is binding.
     *Package*
          *note num-utils.print-matrix: ❨21❩.
     *Source*
          *note print-matrix.lisp: ❨10❩.
 -- Function: print-matrix (matrix stream &key formatter masked-fn
          aligned? padding indent)
     Format and print the elements of MATRIX (a 2d array) to STREAM,
     using PADDING between columns.

     MASKED-FN is called on row and column indices.  If it returns nil,
     the corresponding element is formatted using FORMATTER and printed.
     Otherwise, it should return a string, which is printed as is.
     INDENT is printed before each row.

     If ALIGNED?, columns will be right-aligned.  At most *PRINT-LENGTH*
     rows and columns are printed, more is indicated with ellipses
     (...).
     *Package*
          *note num-utils.print-matrix: ❨21❩.
     *Source*
          *note print-matrix.lisp: ❨10❩.
 -- Function: relative (fraction)
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Reader: rms (instance)
 -- Writer: (setf rms) (instance)
     *Package*
          *note num-utils.test-utilities: ❨29❩.
     *Source*
          *note test-utilities.lisp: ❨18❩.
     *Target Slot*
          *note rms: ❨328❩.
 -- Function: romberg-quadrature (f interval &key epsilon min-iter
          max-iter transformation)
     Romberg quadrature of F on the interval.  The iteration stops if
     the relative change is below EPSILON, but only after MIN-ITER
     refinements (to avoid spurious premature convergence).  An error
     occurs when MAX-ITER iterations are reached without convergence.
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: root-bisection (f bracket &key delta epsilon)
     Find the root of f bracketed between a and b using bisection.
     The algorithm stops when either the root is bracketed in an
     interval of length TOLERANCE (relative to the initial |a-b|), or
     root is found such that abs(f(root)) <= epsilon.

     Return five values: the root, the value of the function at the
     root, and a boolean which is true iff abs(f(root)) <= epsilon.  If
     the third value is true, the fourth and fifth values are the
     endpoints of the bracketing interval, otherwise they are undefined.
     *Package*
          *note num-utils.rootfinding: ❨35❩.
     *Source*
          *note rootfinding.lisp: ❨15❩.
 -- Function: round* (number &optional divisor offset)
     Find A=I*DIVISOR+OFFSET that minimizes |A-NUMBER|, return (values A
     (- A NUMBER). When NUMBER is exactly in between two possible A’s,
     the rounding rule of ROUND is used on NUMBER-OFFSET.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: same-sign-p (&rest arguments)
     Test whether all arguments have the same sign (ie all are positive,
     negative, or zero).
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: sequence-maximum (x)
     Return the maximum value in the sequence X
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: sequence-minimum (x)
     Return the minimum value in the sequence X
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: shrink-interval (interval left &optional right
          check-flip?)
     Shrink interval by given magnitudes (which may be REAL or
     RELATIVE). When check-flip?, the result is checked for endpoints
     being in a different order than the original.  Negative LEFT and
     RIGHT extend the interval.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Function: spacer (&optional weight)
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Function: split-interval (interval divisions)
     Return a vector of subintervals (same length as DIVISIONS),
     splitting the interval using the sequence DIVISIONS, which can be
     nonnegative real numbers (or RELATIVE specifications) and SPACERs
     which divide the leftover proportionally.  If there are no spacers
     and the divisions don’t fill up the interval, and error is
     signalled.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Function: square (number)
     Square of number.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: subintervals-in (interval count &optional mid-open-right?)
     Return INTERVAL evenly divided into COUNT subintervals as a vector.
     When MID-OPEN-RIGHT?, subintervals in the middle are open on the
     right and closed on the left, otherwise the opposite; openness of
     endpoints on the edge follows INTERVAL.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Reader: test-count (instance)
 -- Writer: (setf test-count) (instance)
     *Package*
          *note num-utils.test-utilities: ❨29❩.
     *Source*
          *note test-utilities.lisp: ❨18❩.
     *Target Slot*
          *note test-count: ❨325❩.
 -- Function: test-fn (expected-column fn &rest fn-param-columns)
     Test the differences between expected values and the given function
     *Package*
          *note num-utils.test-utilities: ❨29❩.
     *Source*
          *note test-utilities.lisp: ❨18❩.
 -- Function: truncate* (number &optional divisor offset)
     Find A=I*DIVISOR+OFFSET that maximizes |A|<=|NUMBER| with the same
     sign, return (values A (- A NUMBER).
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: upper-triangular-matrix (elements)
     Create a lower-triangular-matrix.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Reader: variance0 (instance)
 -- Writer: (setf variance0) (instance)
     *Package*
          *note num-utils.test-utilities: ❨29❩.
     *Source*
          *note test-utilities.lisp: ❨18❩.
     *Target Slot*
          *note variance0: ❨326❩.
 -- Reader: variance1 (instance)
 -- Writer: (setf variance1) (instance)
     *Package*
          *note num-utils.test-utilities: ❨29❩.
     *Source*
          *note test-utilities.lisp: ❨18❩.
     *Target Slot*
          *note variance1: ❨327❩.
 -- Function: vec (element-type &rest elements)
     Return a vector with elements coerced to ELEMENT-TYPE.
     *Package*
          *note num-utils.matrix-shorthand: ❨24❩.
     *Source*
          *note matrix-shorthand.lisp: ❨12❩.
 -- Function: within? (left value right)
     Return non-nil iff value is in [left,right).
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Reader: worst-case (instance)
 -- Writer: (setf worst-case) (instance)
     *Package*
          *note num-utils.test-utilities: ❨29❩.
     *Source*
          *note test-utilities.lisp: ❨18❩.
     *Target Slot*
          *note worst-case: ❨321❩.
 -- Reader: wrapped-matrix-elements (instance)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
     *Target Slot*
          *note elements: ❨229❩.


File: num-utils.info,  Node: Public generic functions,  Next: Public standalone methods,  Prev: Public ordinary functions,  Up: Public Interface

4.1.5 Generic functions
-----------------------

 -- Generic Function: as-alist (object)
     Return OBJECT as an ALIST. Semantics depends on OBJECT.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Generic Function: as-plist (object)
     Return OBJECT as a PLIST. Semantics depends on OBJECT. The default
     method uses AS-ALIST.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
     *Methods*
           -- Method: as-plist (object)
 -- Generic Function: diagonal-vector (matrix)
     Return the diagonal elements of MATRIX as a vector.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
     *Methods*
           -- Method: diagonal-vector ((matrix array))
           -- Method: diagonal-vector (matrix)
 -- Generic Function: (setf diagonal-vector) (matrix)
     Set the diagonal elements of MATRIX using VECTOR.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
     *Methods*
           -- Method: (setf diagonal-vector) ((matrix array))
 -- Generic Function: e1- (a)
     Univariate elementwise -.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: e1- ((a *note diagonal-matrix: ❨236❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e1- ((a *note hermitian-matrix: ❨222❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e1- ((a *note upper-triangular-matrix: ❨218❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e1- ((a *note lower-triangular-matrix: ❨234❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e1- ((a number))
           -- Method: e1- ((a array))
 -- Generic Function: e1/ (a)
     Univariate elementwise /.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: e1/ ((a *note diagonal-matrix: ❨236❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e1/ ((a *note hermitian-matrix: ❨222❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e1/ ((a *note upper-triangular-matrix: ❨218❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e1/ ((a *note lower-triangular-matrix: ❨234❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e1/ ((a number))
           -- Method: e1/ ((a array))
 -- Generic Function: e1log (a)
     Univariate elementwise LOG.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: e1log ((a *note diagonal-matrix: ❨236❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e1log ((a *note hermitian-matrix: ❨222❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e1log ((a *note upper-triangular-matrix: ❨218❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e1log ((a *note lower-triangular-matrix: ❨234❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e1log ((a number))
           -- Method: e1log ((a array))
 -- Generic Function: e2* (a b)
     Bivariate elementwise *.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: e2* ((a *note diagonal-matrix: ❨236❩.) (b *note
                    diagonal-matrix: ❨236❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2* ((a *note hermitian-matrix: ❨222❩.) (b *note
                    hermitian-matrix: ❨222❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2* ((a *note upper-triangular-matrix: ❨218❩.) (b
                    *note upper-triangular-matrix: ❨218❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2* ((a *note lower-triangular-matrix: ❨234❩.) (b
                    *note lower-triangular-matrix: ❨234❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2* ((a number) (b *note diagonal-matrix: ❨236❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2* ((a *note diagonal-matrix: ❨236❩.) (b number))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2* ((a number) (b *note hermitian-matrix:
                    ❨222❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2* ((a *note hermitian-matrix: ❨222❩.) (b
                    number))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2* ((a number) (b *note upper-triangular-matrix:
                    ❨218❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2* ((a *note upper-triangular-matrix: ❨218❩.) (b
                    number))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2* ((a number) (b *note lower-triangular-matrix:
                    ❨234❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2* ((a *note lower-triangular-matrix: ❨234❩.) (b
                    number))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2* (a (b *note wrapped-matrix: ❨228❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2* ((a *note wrapped-matrix: ❨228❩.) b)
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2* ((a number) (b number))
           -- Method: e2* ((a vector) (b number))
           -- Method: e2* ((a number) (b vector))
           -- Method: e2* ((a vector) (b vector))
           -- Method: e2* ((a array) (b number))
           -- Method: e2* ((a number) (b array))
           -- Method: e2* ((a array) (b array))
 -- Generic Function: e2+ (a b)
     Bivariate elementwise +.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: e2+ ((a *note diagonal-matrix: ❨236❩.) (b *note
                    diagonal-matrix: ❨236❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2+ ((a *note hermitian-matrix: ❨222❩.) (b *note
                    hermitian-matrix: ❨222❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2+ ((a *note upper-triangular-matrix: ❨218❩.) (b
                    *note upper-triangular-matrix: ❨218❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2+ ((a *note lower-triangular-matrix: ❨234❩.) (b
                    *note lower-triangular-matrix: ❨234❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2+ (a (b *note wrapped-matrix: ❨228❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2+ ((a *note wrapped-matrix: ❨228❩.) b)
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2+ ((a number) (b number))
           -- Method: e2+ ((a vector) (b number))
           -- Method: e2+ ((a number) (b vector))
           -- Method: e2+ ((a vector) (b vector))
           -- Method: e2+ ((a array) (b number))
           -- Method: e2+ ((a number) (b array))
           -- Method: e2+ ((a array) (b array))
 -- Generic Function: e2- (a b)
     Bivariate elementwise -.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: e2- ((a *note diagonal-matrix: ❨236❩.) (b *note
                    diagonal-matrix: ❨236❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2- ((a *note hermitian-matrix: ❨222❩.) (b *note
                    hermitian-matrix: ❨222❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2- ((a *note upper-triangular-matrix: ❨218❩.) (b
                    *note upper-triangular-matrix: ❨218❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2- ((a *note lower-triangular-matrix: ❨234❩.) (b
                    *note lower-triangular-matrix: ❨234❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2- (a (b *note wrapped-matrix: ❨228❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2- ((a *note wrapped-matrix: ❨228❩.) b)
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2- ((a number) (b number))
           -- Method: e2- ((a vector) (b number))
           -- Method: e2- ((a number) (b vector))
           -- Method: e2- ((a vector) (b vector))
           -- Method: e2- ((a array) (b number))
           -- Method: e2- ((a number) (b array))
           -- Method: e2- ((a array) (b array))
 -- Generic Function: e2/ (a b)
     Bivariate elementwise /.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: e2/ ((a number) (b *note diagonal-matrix: ❨236❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2/ ((a *note diagonal-matrix: ❨236❩.) (b number))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2/ ((a number) (b *note hermitian-matrix:
                    ❨222❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2/ ((a *note hermitian-matrix: ❨222❩.) (b
                    number))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2/ ((a number) (b *note upper-triangular-matrix:
                    ❨218❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2/ ((a *note upper-triangular-matrix: ❨218❩.) (b
                    number))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2/ ((a number) (b *note lower-triangular-matrix:
                    ❨234❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2/ ((a *note lower-triangular-matrix: ❨234❩.) (b
                    number))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: e2/ ((a number) (b number))
           -- Method: e2/ ((a vector) (b number))
           -- Method: e2/ ((a number) (b vector))
           -- Method: e2/ ((a vector) (b vector))
           -- Method: e2/ ((a array) (b number))
           -- Method: e2/ ((a number) (b array))
           -- Method: e2/ ((a array) (b array))
 -- Generic Function: e2< (a b)
     Bivariate elementwise <.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: e2< ((a number) (b number))
           -- Method: e2< ((a vector) (b number))
           -- Method: e2< ((a number) (b vector))
           -- Method: e2< ((a vector) (b vector))
           -- Method: e2< ((a array) (b number))
           -- Method: e2< ((a number) (b array))
           -- Method: e2< ((a array) (b array))
 -- Generic Function: e2<= (a b)
     Bivariate elementwise <=.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: e2<= ((a number) (b number))
           -- Method: e2<= ((a vector) (b number))
           -- Method: e2<= ((a number) (b vector))
           -- Method: e2<= ((a vector) (b vector))
           -- Method: e2<= ((a array) (b number))
           -- Method: e2<= ((a number) (b array))
           -- Method: e2<= ((a array) (b array))
 -- Generic Function: e2= (a b)
     Bivariate elementwise =.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: e2= ((a number) (b number))
           -- Method: e2= ((a vector) (b number))
           -- Method: e2= ((a number) (b vector))
           -- Method: e2= ((a vector) (b vector))
           -- Method: e2= ((a array) (b number))
           -- Method: e2= ((a number) (b array))
           -- Method: e2= ((a array) (b array))
 -- Generic Function: e2> (a b)
     Bivariate elementwise >.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: e2> ((a number) (b number))
           -- Method: e2> ((a vector) (b number))
           -- Method: e2> ((a number) (b vector))
           -- Method: e2> ((a vector) (b vector))
           -- Method: e2> ((a array) (b number))
           -- Method: e2> ((a number) (b array))
           -- Method: e2> ((a array) (b array))
 -- Generic Function: e2>= (a b)
     Bivariate elementwise >=.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: e2>= ((a number) (b number))
           -- Method: e2>= ((a vector) (b number))
           -- Method: e2>= ((a number) (b vector))
           -- Method: e2>= ((a vector) (b vector))
           -- Method: e2>= ((a array) (b number))
           -- Method: e2>= ((a number) (b array))
           -- Method: e2>= ((a array) (b array))
 -- Generic Function: e2log (a b)
     Bivariate elementwise LOG.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: e2log ((a number) (b number))
           -- Method: e2log ((a vector) (b number))
           -- Method: e2log ((a number) (b vector))
           -- Method: e2log ((a vector) (b vector))
           -- Method: e2log ((a array) (b number))
           -- Method: e2log ((a number) (b array))
           -- Method: e2log ((a array) (b array))
 -- Generic Function: eceiling (a)
     Univariate elementwise CEILING.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: eceiling ((a number))
           -- Method: eceiling ((a array))
 -- Generic Function: econjugate (a)
     Univariate elementwise CONJUGATE.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: econjugate ((a number))
           -- Method: econjugate ((a array))
 -- Generic Function: ecos (a)
     Univariate elementwise COS.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: ecos ((a number))
           -- Method: ecos ((a array))
 -- Generic Function: eexp (a)
     Univariate elementwise EXP.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: eexp ((a *note diagonal-matrix: ❨236❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: eexp ((a *note hermitian-matrix: ❨222❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: eexp ((a *note upper-triangular-matrix: ❨218❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: eexp ((a *note lower-triangular-matrix: ❨234❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: eexp ((a number))
           -- Method: eexp ((a array))
 -- Generic Function: eexpt (a b)
     Bivariate elementwise EXPT.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: eexpt ((a number) (b number))
           -- Method: eexpt ((a vector) (b number))
           -- Method: eexpt ((a number) (b vector))
           -- Method: eexpt ((a vector) (b vector))
           -- Method: eexpt ((a array) (b number))
           -- Method: eexpt ((a number) (b array))
           -- Method: eexpt ((a array) (b array))
 -- Generic Function: efloor (a)
     Univariate elementwise FLOOR.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: efloor ((a number))
           -- Method: efloor ((a array))
 -- Generic Function: emod (a b)
     Bivariate elementwise MOD.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: emod ((a number) (b number))
           -- Method: emod ((a vector) (b number))
           -- Method: emod ((a number) (b vector))
           -- Method: emod ((a vector) (b vector))
           -- Method: emod ((a array) (b number))
           -- Method: emod ((a number) (b array))
           -- Method: emod ((a array) (b array))
 -- Generic Function: ereduce (function object &key key)
     Elementwise reduce, traversing in row-major order.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: ereduce (function (array array) &key key)
           -- Method: ereduce (function (sequence sequence) &key key)
           -- Method: ereduce (function object &key key)
 -- Generic Function: esin (a)
     Univariate elementwise SIN.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: esin ((a number))
           -- Method: esin ((a array))
 -- Generic Function: esqrt (a)
     Univariate elementwise SQRT.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: esqrt ((a *note diagonal-matrix: ❨236❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: esqrt ((a *note hermitian-matrix: ❨222❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: esqrt ((a *note upper-triangular-matrix: ❨218❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: esqrt ((a *note lower-triangular-matrix: ❨234❩.))
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: esqrt ((a number))
           -- Method: esqrt ((a array))
 -- Generic Function: extend-interval (interval object)
     Return an interval that includes INTERVAL and OBJECT. NIL stands
     for the empty set.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Methods*
           -- Method: extend-interval ((interval null) (object null))
           -- Method: extend-interval ((interval null) (number real))
           -- Method: extend-interval ((interval *note interval: ❨170❩.)
                    (number real))
           -- Method: extend-interval (interval (object *note interval:
                    ❨170❩.))
           -- Method: extend-interval (interval (list list))
           -- Method: extend-interval (interval (array array))
 -- Generic Function: l2norm-square (object)
     Square of the $L_2$ norm of OBJECT.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
     *Methods*
           -- Method: l2norm-square ((sequence sequence))
 -- Generic Function: left (interval)
     Left endpoint of interval.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Methods*
           -- Method: left ((interval *note interval/infinite-left:
                    ❨182❩.))
           -- Reader Method: left ((interval/finite-left *note
                    interval/finite-left: ❨190❩.))
               automatically generated reader method
               *Target Slot*
                    *note left: ❨191❩.
 -- Generic Function: map-array (array function &optional retval)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Methods*
           -- Method: map-array (array function &optional retval)
               Apply FUNCTION to each element of ARRAY
               Return a new array, or write into the optional 3rd
               argument.
               *Source*
                    *note matrix.lisp: ❨11❩.
 -- Generic Function: num= (a b &optional tolerance)
     Compare A and B for approximate equality, checking corresponding
     elements when applicable (using TOLERANCE).

     Two numbers A and B are NUM= iff |a-b|/max(1,|a|,|b|) <= tolerance.

     Unless a method is defined for them, two objects are compared with
     EQUALP.

     Generally, methods should be defined so that two objects are NUM=
     if they the same class, same dimensions, and all their elements are
     NUM=.
     *Package*
          *note num-utils.num=: ❨32❩.
     *Source*
          *note num=.lisp: ❨5❩.
     *Methods*
           -- Method: num= ((a *note diagonal-matrix: ❨236❩.) (b *note
                    diagonal-matrix: ❨236❩.) &optional tolerance)
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: num= ((a *note wrapped-matrix: ❨228❩.) (b *note
                    wrapped-matrix: ❨228❩.) &optional tolerance)
               *Source*
                    *note matrix.lisp: ❨11❩.
           -- Method: num= ((a *note finite-interval: ❨172❩.) (b *note
                    finite-interval: ❨172❩.) &optional tolerance)
               *Source*
                    *note interval.lisp: ❨9❩.
           -- Method: num= ((a *note real-line: ❨148❩.) (b *note
                    real-line: ❨148❩.) &optional tolerance)
               *Source*
                    *note interval.lisp: ❨9❩.
           -- Method: num= (a b &optional tolerance)
           -- Method: num= ((a number) (b number) &optional tolerance)
           -- Method: num= ((a array) (b array) &optional tolerance)
           -- Method: num= ((a cons) (b cons) &optional tolerance)
           -- Method: num= ((a null) (b null) &optional tolerance)
 -- Generic Function: open-left? (interval)
     True iff the left endpoint of the interval is open.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Methods*
           -- Method: open-left? ((interval *note
                    interval/infinite-left: ❨182❩.))
           -- Reader Method: open-left? ((interval/finite-left *note
                    interval/finite-left: ❨190❩.))
               automatically generated reader method
               *Target Slot*
                    *note open-left?: ❨192❩.
 -- Generic Function: open-right? (interval)
     True iff the right endpoint of the interval is open.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Methods*
           -- Method: open-right? ((interval *note
                    interval/infinite-right: ❨196❩.))
           -- Reader Method: open-right? ((interval/finite-right *note
                    interval/finite-right: ❨187❩.))
               automatically generated reader method
               *Target Slot*
                    *note open-right?: ❨189❩.
 -- Generic Function: product (object)
     Product of elements in object.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
     *Methods*
           -- Method: product ((sequence sequence))
           -- Method: product ((array array))
 -- Generic Function: right (interval)
     Right endpoint of interval.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Methods*
           -- Method: right ((interval *note interval/infinite-right:
                    ❨196❩.))
           -- Reader Method: right ((interval/finite-right *note
                    interval/finite-right: ❨187❩.))
               automatically generated reader method
               *Target Slot*
                    *note right: ❨188❩.
 -- Generic Function: shift-interval (interval offset)
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Methods*
           -- Method: shift-interval ((interval *note finite-interval:
                    ❨172❩.) (offset real))
 -- Generic Function: sum (object &key key)
     Sum of elements in object.  KEY is applied to each element.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
     *Methods*
           -- Method: sum ((sequence sequence) &key key)
           -- Method: sum ((array array) &key key)
 -- Generic Function: transpose (array)
     Transpose.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
     *Methods*
           -- Method: transpose ((array array))
           -- Method: transpose ((matrix *note lower-triangular-matrix:
                    ❨234❩.))
           -- Method: transpose ((matrix *note upper-triangular-matrix:
                    ❨218❩.))
           -- Method: transpose ((matrix *note hermitian-matrix:
                    ❨222❩.))
           -- Method: transpose ((diagonal *note diagonal-matrix:
                    ❨236❩.))


File: num-utils.info,  Node: Public standalone methods,  Next: Public structures,  Prev: Public generic functions,  Up: Public Interface

4.1.6 Standalone methods
------------------------

 -- Method: as-array ((matrix0 *note upper-triangular-matrix: ❨218❩.))
     *Package*
          array-operations/generic.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Method: as-array ((matrix0 *note hermitian-matrix: ❨222❩.))
     *Package*
          array-operations/generic.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Method: as-array ((matrix0 *note lower-triangular-matrix: ❨234❩.))
     *Package*
          array-operations/generic.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Method: as-array ((diagonal-matrix *note diagonal-matrix: ❨236❩.))
     *Package*
          array-operations/generic.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Method: dims ((wrapped-matrix *note wrapped-matrix: ❨228❩.))
     *Package*
          array-operations/generic.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Method: dims ((diagonal-matrix *note diagonal-matrix: ❨236❩.))
     *Package*
          array-operations/generic.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Method: element-type ((wrapped-matrix *note wrapped-matrix: ❨228❩.))
     *Package*
          array-operations/generic.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Method: element-type ((diagonal-matrix *note diagonal-matrix:
          ❨236❩.))
     *Package*
          array-operations/generic.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Method: initialize-instance :after ((interval *note finite-interval:
          ❨172❩.) &key &allow-other-keys)
     *Source*
          *note interval.lisp: ❨9❩.
 -- Method: print-object ((interval *note interval: ❨170❩.) stream)
     *Source*
          *note interval.lisp: ❨9❩.
 -- Method: print-object ((matrix0 *note upper-triangular-matrix:
          ❨218❩.) stream1)
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Method: print-object ((matrix0 *note hermitian-matrix: ❨222❩.)
          stream1)
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Method: print-object ((matrix0 *note lower-triangular-matrix:
          ❨234❩.) stream1)
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Method: select ((matrix0 *note upper-triangular-matrix: ❨218❩.)
          &rest slices)
     *Package*
          select.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Method: select ((matrix0 *note hermitian-matrix: ❨222❩.) &rest
          slices)
     *Package*
          select.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Method: select ((matrix0 *note lower-triangular-matrix: ❨234❩.)
          &rest slices)
     *Package*
          select.
     *Source*
          *note matrix.lisp: ❨11❩.


File: num-utils.info,  Node: Public structures,  Next: Public classes,  Prev: Public standalone methods,  Up: Public Interface

4.1.7 Structures
----------------

 -- Structure: diagonal-matrix
     Diagonal matrix.  The elements in the diagonal are stored in a
     vector.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
     *Direct superclasses*
          structure-object.
     *Direct methods*
             • *note as-array: ❨645❩.
             • *note dims: ❨643❩.
             • *note e1-: ❨461❩.
             • *note e1/: ❨385❩.
             • *note e1log: ❨543❩.
             • *note e2*: ❨412❩.
             • *note e2*: ❨416❩.
             • *note e2*: ❨417❩.
             • *note e2+: ❨514❩.
             • *note e2-: ❨484❩.
             • *note e2/: ❨468❩.
             • *note e2/: ❨469❩.
             • *note eexp: ❨536❩.
             • *note element-type: ❨644❩.
             • *note esqrt: ❨404❩.
             • *note num=: ❨584❩.
             • *note transpose: ❨243❩.
     *Direct slots*
           -- Slot: elements
               *Type*
                    vector
               *Readers*
                    *note diagonal-matrix-elements: ❨231❩.
               *Writers*
                    *note (setf diagonal-matrix-elements): ❨232❩.
 -- Structure: hermitian-matrix
     Hermitian/symmetric matrix, with elements stored in the _lower_
     triangle.

     Implements _both_ real symmetric and complex Hermitian matrices —
     as technically, real symmetric matrices are also Hermitian.
     Complex symmetric matrices are _not_ implemented as a special
     matrix type, as they don’t have any special properties (eg real
     eigenvalues, etc).
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
     *Direct superclasses*
          *note wrapped-matrix: ❨228❩.
     *Direct methods*
             • *note as-array: ❨636❩.
             • *note e1-: ❨462❩.
             • *note e1/: ❨386❩.
             • *note e1log: ❨544❩.
             • *note e2*: ❨413❩.
             • *note e2*: ❨418❩.
             • *note e2*: ❨419❩.
             • *note e2+: ❨515❩.
             • *note e2-: ❨485❩.
             • *note e2/: ❨470❩.
             • *note e2/: ❨471❩.
             • *note eexp: ❨537❩.
             • *note esqrt: ❨405❩.
             • *note print-object: ❨635❩.
             • *note select: ❨634❩.
             • *note transpose: ❨242❩.
 -- Structure: lower-triangular-matrix
     Lower triangular matrix.  ELEMENTS in the upper triangle are
     treated as zero.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
     *Direct superclasses*
          *note wrapped-matrix: ❨228❩.
     *Direct methods*
             • *note as-array: ❨642❩.
             • *note e1-: ❨464❩.
             • *note e1/: ❨388❩.
             • *note e1log: ❨546❩.
             • *note e2*: ❨415❩.
             • *note e2*: ❨422❩.
             • *note e2*: ❨423❩.
             • *note e2+: ❨517❩.
             • *note e2-: ❨487❩.
             • *note e2/: ❨474❩.
             • *note e2/: ❨475❩.
             • *note eexp: ❨539❩.
             • *note esqrt: ❨407❩.
             • *note print-object: ❨641❩.
             • *note select: ❨640❩.
             • *note transpose: ❨240❩.
 -- Structure: relative
     Relative sizes are in terms of width.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Direct superclasses*
          structure-object.
     *Direct slots*
           -- Slot: fraction
               *Type*
                    (real 0)
               *Readers*
                    *note relative-fraction: ❨178❩.
               *Writers*
                    This slot is read-only.
 -- Structure: spacer
     Spacers divide the leftover portion of an interval.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Direct superclasses*
          structure-object.
     *Direct slots*
           -- Slot: weight
               *Type*
                    (real 0)
               *Initform*
                    1
               *Readers*
                    *note spacer-weight: ❨194❩.
               *Writers*
                    This slot is read-only.
 -- Structure: test-results
     Differences between reference values and computed values
     *Package*
          *note num-utils.test-utilities: ❨29❩.
     *Source*
          *note test-utilities.lisp: ❨18❩.
     *Direct superclasses*
          structure-object.
     *Direct slots*
           -- Slot: worst-case
               *Type*
                    integer
               *Initform*
                    0
               *Readers*
                    *note worst-case: ❨339❩.
               *Writers*
                    *note (setf worst-case): ❨340❩.
           -- Slot: min-error
               *Type*
                    double-float
               *Initform*
                    0.0d0
               *Readers*
                    *note min-error: ❨318❩.
               *Writers*
                    *note (setf min-error): ❨319❩.
           -- Slot: max-error
               *Type*
                    double-float
               *Initform*
                    0.0d0
               *Readers*
                    *note max-error: ❨331❩.
               *Writers*
                    *note (setf max-error): ❨332❩.
           -- Slot: mean-error
               *Type*
                    double-float
               *Initform*
                    0.0d0
               *Readers*
                    *note mean-error: ❨329❩.
               *Writers*
                    *note (setf mean-error): ❨330❩.
           -- Slot: test-count
               *Type*
                    integer
               *Initform*
                    0
               *Readers*
                    *note test-count: ❨337❩.
               *Writers*
                    *note (setf test-count): ❨338❩.
           -- Slot: variance0
               *Type*
                    double-float
               *Initform*
                    0.0d0
               *Readers*
                    *note variance0: ❨333❩.
               *Writers*
                    *note (setf variance0): ❨334❩.
           -- Slot: variance1
               *Type*
                    double-float
               *Initform*
                    0.0d0
               *Readers*
                    *note variance1: ❨315❩.
               *Writers*
                    *note (setf variance1): ❨316❩.
           -- Slot: rms
               *Type*
                    double-float
               *Initform*
                    0.0d0
               *Readers*
                    *note rms: ❨341❩.
               *Writers*
                    *note (setf rms): ❨342❩.
 -- Structure: upper-triangular-matrix
     Upper triangular matrix.  ELEMENTS in the lower triangle are
     treated as zero.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
     *Direct superclasses*
          *note wrapped-matrix: ❨228❩.
     *Direct methods*
             • *note as-array: ❨633❩.
             • *note e1-: ❨463❩.
             • *note e1/: ❨387❩.
             • *note e1log: ❨545❩.
             • *note e2*: ❨414❩.
             • *note e2*: ❨420❩.
             • *note e2*: ❨421❩.
             • *note e2+: ❨516❩.
             • *note e2-: ❨486❩.
             • *note e2/: ❨472❩.
             • *note e2/: ❨473❩.
             • *note eexp: ❨538❩.
             • *note esqrt: ❨406❩.
             • *note print-object: ❨632❩.
             • *note select: ❨631❩.
             • *note transpose: ❨241❩.
 -- Structure: wrapped-matrix
     A matrix that has some special structure (eg triangular,
     symmetric/hermitian).  ELEMENTS is always a matrix.  Not used
     directly, not exported.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
     *Direct superclasses*
          structure-object.
     *Direct subclasses*
             • *note hermitian-matrix: ❨222❩.
             • *note lower-triangular-matrix: ❨234❩.
             • *note upper-triangular-matrix: ❨218❩.
     *Direct methods*
             • *note dims: ❨638❩.
             • *note e2*: ❨424❩.
             • *note e2*: ❨425❩.
             • *note e2+: ❨518❩.
             • *note e2+: ❨519❩.
             • *note e2-: ❨488❩.
             • *note e2-: ❨489❩.
             • *note element-type: ❨639❩.
             • *note num=: ❨585❩.
     *Direct slots*
           -- Slot: elements
               *Type*
                    (array * (* *))
               *Readers*
                    *note wrapped-matrix-elements: ❨230❩.
               *Writers*
                    This slot is read-only.


File: num-utils.info,  Node: Public classes,  Next: Public types,  Prev: Public structures,  Up: Public Interface

4.1.8 Classes
-------------

 -- Class: finite-interval
     Interval with finite endpoints.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Direct superclasses*
             • *note interval: ❨170❩.
             • *note interval/finite-left: ❨190❩.
             • *note interval/finite-right: ❨187❩.
     *Direct methods*
             • *note chebyshev-approximate-implementation: ❨128❩.
             • *note initialize-instance: ❨630❩.
             • *note num=: ❨586❩.
             • *note shift-interval: ❨163❩.
             • *note transformed-quadrature: ❨52❩.
 -- Class: interval
     Abstract superclass for all intervals.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Direct subclasses*
             • *note finite-interval: ❨172❩.
             • *note minusinf-interval: ❨171❩.
             • *note plusinf-interval: ❨150❩.
             • *note real-line: ❨148❩.
     *Direct methods*
             • *note extend-interval: ❨141❩.
             • *note extend-interval: ❨142❩.
             • *note print-object: ❨629❩.
 -- Class: minusinf-interval
     Interval from -∞ to RIGHT.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Direct superclasses*
             • *note interval: ❨170❩.
             • *note interval/finite-right: ❨187❩.
             • *note interval/infinite-left: ❨182❩.
 -- Class: plusinf-interval
     Interval from LEFT to ∞.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Direct superclasses*
             • *note interval: ❨170❩.
             • *note interval/finite-left: ❨190❩.
             • *note interval/infinite-right: ❨196❩.
     *Direct methods*
             • *note chebyshev-approximate-implementation: ❨127❩.
             • *note transformed-quadrature: ❨53❩.
 -- Class: real-line
     Representing the real line (-∞,∞).
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Direct superclasses*
             • *note interval: ❨170❩.
             • *note interval/infinite-left: ❨182❩.
             • *note interval/infinite-right: ❨196❩.
     *Direct methods*
          *note num=: ❨587❩.


File: num-utils.info,  Node: Public types,  Prev: Public classes,  Up: Public Interface

4.1.9 Types
-----------

 -- Type: extended-real (&optional base)
     Extended real number.
     *Package*
          *note num-utils.extended-real: ❨27❩.
     *Source*
          *note extended-real.lisp: ❨8❩.
 -- Type: simple-boolean-vector (&optional length)
     Vector of BOOLEAN elements.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Type: simple-double-float-vector (&optional length)
     Simple vector of double-float elements.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Type: simple-fixnum-vector ()
     Simple vector of fixnum elements.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Type: simple-single-float-vector (&optional length)
     Simple vector of single-float elements.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Type: triangular-matrix ()
     Triangular matrix (either lower or upper).
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.


File: num-utils.info,  Node: Internals,  Prev: Public Interface,  Up: Definitions

4.2 Internals
=============

* Menu:

* Private macros::
* Private ordinary functions::
* Private generic functions::
* Private structures::
* Private classes::
* Private types::


File: num-utils.info,  Node: Private macros,  Next: Private ordinary functions,  Prev: Internals,  Up: Internals

4.2.1 Macros
------------

 -- Macro: &diagonal-matrix (elements)
     LET+ form for slots of the structure DIAGONAL-MATRIX.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Macro: &diagonal-matrix-r/o (elements)
     LET+ form for slots of the structure DIAGONAL-MATRIX. Read-only.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Macro: define-comparison (name test)
     Define a comparison, extendeding a pairwise comparison to an
     arbitrary number of arguments.
     *Package*
          *note num-utils.extended-real: ❨27❩.
     *Source*
          *note extended-real.lisp: ❨8❩.
 -- Macro: define-e& (operation &key function bivariate univariate
          docstring)
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
 -- Macro: define-e1 (operation &key function docstring)
     Define an univariate elementwise operation.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
 -- Macro: define-e2 (operation &key function docstring)
     Define a bivariate elementwise operation.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
 -- Macro: define-elementwise-as-array (type &key functions)
     Define binary elementwise operations for FUNCTION, implemented by
     converting them to arrays.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Macro: define-elementwise-reduction (name function &optional
          docstring)
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
 -- Macro: define-elementwise-same-class (type &key functions
          elements-accessor)
     Define binary elementwise operations for FUNCTION for two arguments
     of the same class.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Macro: define-elementwise-univariate (type &key functions
          elements-accessor)
     Define unary elementwise operations for FUNCTION for all subclasses
     of wrapped-elements.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Macro: define-elementwise-with-constant (type &key functions
          elements-accessor)
     Define binary elementwise operations for FUNCTION for all
     subclasses of wrapped-elements.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Macro: define-rounding-with-offset (name function docstring)
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Macro: define-wrapped-matrix (type elements struct-docstring
          (masked-test masked-string) check-and-convert-elements
          regularize-elements)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Macro: mapping-array ((ref array &rest other) form)
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
 -- Macro: univariate-rootfinder-loop% (((f a b fa fb) (f-tested
          test-bracket delta epsilon)) &body body)
     Common parts for univariate rootfinder functions.

     Sets up the following:

     - function OPPOSITE-SIGN-P for checking that two numbers are on the
     opposite side of 0

     - function EVALUATE-AND-RETURN-IF-WITHIN-EPSILON which checks that
     |f(x)| <= EPSILON, if so, returns from the block with (VALUES X FX
     T), otherwise simply returns the value

     - function RETURN-IF-WITHIN-TOLERANCE checks if the interval [A,B]
     bracketing X is small enough (smaller than TOLERANCE) and if so,
     returns (X FX NIL (INTERVAL A B))

     - variables FA and FB to hold function values at A and B

     Initially, it checks for either $f(a)$ or $f(b)$ being a root, and
     establishes $a leq b$ by exchanging $a,f(a)$ and $b,f(b)$ if
     necessary.  Also checks that $f(a)$ and $f(b)$ are of opposite
     sign.  Checks that both tolerance and epsilon are nonnegative.
     *Package*
          *note num-utils.rootfinding: ❨35❩.
     *Source*
          *note rootfinding.lisp: ❨15❩.


File: num-utils.info,  Node: Private ordinary functions,  Next: Private generic functions,  Prev: Private macros,  Up: Internals

4.2.2 Ordinary functions
------------------------

 -- Function: ab-to-cd-intercept-slope (a b c d)
     Return (values INTERCEPT SLOPE) for linear mapping x:->
     intercept+slope*x from [a,b] to [c,d].
     *Package*
          *note num-utils.chebyshev: ❨22❩.
     *Source*
          *note chebyshev.lisp: ❨13❩.
 -- Function: ab-to-cinf (z a b c)
     Inverse of cinf-to-ab.
     *Package*
          *note num-utils.chebyshev: ❨22❩.
     *Source*
          *note chebyshev.lisp: ❨13❩.
 -- Function: above-diagonal? (row col)
     Test if element with indexes row and col is (strictly) above the
     diagonal.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: below-diagonal? (row col)
     Test if element with indexes row and col is (strictly) below the
     diagonal.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: boolean-sequence-p (x)
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Function: boolean? (object)
     Check type of OBJECT is BOOLEAN.
     *Package*
          *note num-utils.utilities: ❨28❩.
     *Source*
          *note utilities.lisp: ❨4❩.
 -- Function: chebyshev-recursion (x value previous-value)
     Chebyshev polynomial recursion formula.
     *Package*
          *note num-utils.chebyshev: ❨22❩.
     *Source*
          *note chebyshev.lisp: ❨13❩.
 -- Function: cinf-to-ab (x a b c)
     Map x in [c,plus-infinity) to z in [a,b] using x ->
     (x-c)/(1+x-c)+(b-a)+a.
     *Package*
          *note num-utils.chebyshev: ❨22❩.
     *Source*
          *note chebyshev.lisp: ❨13❩.
 -- Function: copy-diagonal-matrix (instance)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: copy-hermitian-matrix (instance)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: copy-iterative-quadrature (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: copy-lower-triangular-matrix (instance)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: copy-midpoint-quadrature (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: copy-relative (instance)
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Function: copy-richardson-extrapolation (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: copy-spacer (instance)
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Function: copy-test-results (instance)
     *Package*
          *note num-utils.test-utilities: ❨29❩.
     *Source*
          *note test-utilities.lisp: ❨18❩.
 -- Function: copy-trapezoidal-quadrature (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: copy-upper-triangular-matrix (instance)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: copy-wrapped-matrix (instance)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: diagonal-matrix-p (object)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: ensure-valid-elements (array rank &rest predicates)
     Convert OBJECT to an array, check that it

     1.  has the required rank,

     2.  has a valid sparse element type, and

     3.  that it satisfies PREDICATES.

     Return the array.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: extend-pairwise-comparison (test first rest)
     Extend TEST (a pairwise comparison) to an arbitrary number of
     arguments (but at least one, FIRST).
     *Package*
          *note num-utils.extended-real: ❨27❩.
     *Source*
          *note extended-real.lisp: ❨8❩.
 -- Function: hermitian-matrix-elements (instance)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: hermitian-matrix-p (object)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Reader: iterative-quadrature-a (instance)
 -- Writer: (setf iterative-quadrature-a) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
     *Target Slot*
          *note a: ❨100❩.
 -- Reader: iterative-quadrature-b (instance)
 -- Writer: (setf iterative-quadrature-b) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
     *Target Slot*
          *note b: ❨101❩.
 -- Reader: iterative-quadrature-f (instance)
 -- Writer: (setf iterative-quadrature-f) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
     *Target Slot*
          *note f: ❨99❩.
 -- Reader: iterative-quadrature-h (instance)
 -- Writer: (setf iterative-quadrature-h) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
     *Target Slot*
          *note h: ❨102❩.
 -- Reader: iterative-quadrature-n (instance)
 -- Writer: (setf iterative-quadrature-n) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
     *Target Slot*
          *note n: ❨103❩.
 -- Function: iterative-quadrature-p (object)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Reader: iterative-quadrature-sum (instance)
 -- Writer: (setf iterative-quadrature-sum) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
     *Target Slot*
          *note sum: ❨104❩.
 -- Function: ln (n)
     Natural logarithm.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: lower-triangular-matrix-elements (instance)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: lower-triangular-matrix-p (object)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: make-diagonal-matrix (&key elements)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: make-hermitian-matrix (&key elements)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: make-iterative-quadrature (&key f a b h n sum)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: make-lower-triangular-matrix (&key elements)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: make-test-results (&key worst-case min-error max-error
          mean-error test-count variance0 variance1 rms)
     *Package*
          *note num-utils.test-utilities: ❨29❩.
     *Source*
          *note test-utilities.lisp: ❨18❩.
 -- Function: make-upper-triangular-matrix (&key elements)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: make-wrapped-matrix (&key elements)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: midpoint-quadrature (f a b)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: midpoint-quadrature% (&key f a b h n sum)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: midpoint-quadrature-a (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: (setf midpoint-quadrature-a) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: midpoint-quadrature-b (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: (setf midpoint-quadrature-b) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: midpoint-quadrature-f (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: (setf midpoint-quadrature-f) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: midpoint-quadrature-h (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: (setf midpoint-quadrature-h) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: midpoint-quadrature-n (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: (setf midpoint-quadrature-n) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: midpoint-quadrature-p (object)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: midpoint-quadrature-sum (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: (setf midpoint-quadrature-sum) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: narrow-bracket? (a b delta)
     Return true iff $|a-b| < \delta$.
     *Package*
          *note num-utils.rootfinding: ❨35❩.
     *Source*
          *note rootfinding.lisp: ❨15❩.
 -- Function: near-root? (f epsilon)
     Return true iff $|f| < \epsilon$.
     *Package*
          *note num-utils.rootfinding: ❨35❩.
     *Source*
          *note rootfinding.lisp: ❨15❩.
 -- Function: opposite-sign? (a b)
     Return true iff A and B are on opposite sides of 0.
     *Package*
          *note num-utils.rootfinding: ❨35❩.
     *Source*
          *note rootfinding.lisp: ❨15❩.
 -- Function: pad-left-expansion (rows ncol)
     Pad ragged-right rows.  Used internally to implement ragged right
     matrix specifications.
     *Package*
          *note num-utils.matrix-shorthand: ❨24❩.
     *Source*
          *note matrix-shorthand.lisp: ❨12❩.
 -- Function: print-matrix-formatter (x)
     Standard formatter for matrix printing.  Respects
     *print-precision*, and formats complex numbers as a+bi, eg
     0.0+1.0i.
     *Package*
          *note num-utils.print-matrix: ❨21❩.
     *Source*
          *note print-matrix.lisp: ❨10❩.
 -- Reader: relative-fraction (instance)
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Target Slot*
          *note fraction: ❨161❩.
 -- Function: relative-p (object)
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Function: richardson-extrapolation (coefficient iterations)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Reader: richardson-extrapolation-coefficient (instance)
 -- Writer: (setf richardson-extrapolation-coefficient) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
     *Target Slot*
          *note coefficient: ❨95❩.
 -- Reader: richardson-extrapolation-diagonal (instance)
 -- Writer: (setf richardson-extrapolation-diagonal) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
     *Target Slot*
          *note diagonal: ❨97❩.
 -- Reader: richardson-extrapolation-n (instance)
 -- Writer: (setf richardson-extrapolation-n) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
     *Target Slot*
          *note n: ❨96❩.
 -- Function: richardson-extrapolation-p (object)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: richardson-iteration (extrapolation step)
     Add STEP (= $A(h q^{-k}$) to an existing Richardson EXTRAPOLATION.
     See the documentation of RICHARDSON-EXTRAPOLATION for details.
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: romberg-quadrature% (quadrature epsilon min-iter max-iter)
     Internal function implementing Romberg quadrature.  Requires an
     iterative quadrature instance, a relative EPSILON and MIN-ITER for
     the stopping criterion, and the maximum number of iterations
     allowed.  Works on finite intervals.
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: rootfinding-delta (interval &optional delta-relative)
     Default DELTA for rootfinding methods, uses bracket width.
     *Package*
          *note num-utils.rootfinding: ❨35❩.
     *Source*
          *note rootfinding.lisp: ❨15❩.
 -- Function: similar-element-type (element-type)
     Return a type that is a supertype of ELEMENT-TYPE and is closed
     under arithmetic operations.  May not be the narrowest.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: similar-sequence-type (sequence)
     Return type that sequence can be mapped to using arithmetic
     operations.
     *Package*
          *note num-utils.arithmetic: ❨30❩.
     *Source*
          *note arithmetic.lisp: ❨6❩.
 -- Function: spacer-p (object)
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
 -- Reader: spacer-weight (instance)
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Target Slot*
          *note weight: ❨147❩.
 -- Function: test-results-p (object)
     *Package*
          *note num-utils.test-utilities: ❨29❩.
     *Source*
          *note test-utilities.lisp: ❨18❩.
 -- Function: trapezoidal-quadrature (f a b)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: trapezoidal-quadrature% (&key f a b h n sum)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: trapezoidal-quadrature-a (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: (setf trapezoidal-quadrature-a) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: trapezoidal-quadrature-b (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: (setf trapezoidal-quadrature-b) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: trapezoidal-quadrature-f (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: (setf trapezoidal-quadrature-f) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: trapezoidal-quadrature-h (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: (setf trapezoidal-quadrature-h) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: trapezoidal-quadrature-n (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: (setf trapezoidal-quadrature-n) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: trapezoidal-quadrature-p (object)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: trapezoidal-quadrature-sum (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: (setf trapezoidal-quadrature-sum) (instance)
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
 -- Function: upper-triangular-matrix-elements (instance)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: upper-triangular-matrix-p (object)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: valid-sparse-type? (type)
     Check if TYPE is a valid type for sparse matrices.  Only supertypes
     and subtypes of NUMBER are allowed.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: wrapped-matrix-p (object)
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.
 -- Function: zero-like (array)
     Return 0 coerced to the element type of ARRAY. It is assumed that
     the latter satisfies VALID-SPARSE-TYPE?.
     *Package*
          *note num-utils.matrix: ❨26❩.
     *Source*
          *note matrix.lisp: ❨11❩.


File: num-utils.info,  Node: Private generic functions,  Next: Private structures,  Prev: Private ordinary functions,  Up: Internals

4.2.3 Generic functions
-----------------------

 -- Generic Function: chebyshev-approximate-implementation (f interval
          n-polynomials n-points)
     Implementation of CHEBYSHEV-APPROXIMATE.
     *Package*
          *note num-utils.chebyshev: ❨22❩.
     *Source*
          *note chebyshev.lisp: ❨13❩.
     *Methods*
           -- Method: chebyshev-approximate-implementation (f (interval
                    *note plusinf-interval: ❨150❩.) n-polynomials
                    n-points)
           -- Method: chebyshev-approximate-implementation (f (interval
                    *note finite-interval: ❨172❩.) n-polynomials
                    n-points)
 -- Generic Function: esquare (a)
     Univariate elementwise SQUARE.
     *Package*
          *note num-utils.elementwise: ❨31❩.
     *Source*
          *note elementwise.lisp: ❨7❩.
     *Methods*
           -- Method: esquare ((a number))
           -- Method: esquare ((a array))
 -- Generic Function: print-left-endpoint (interval stream)
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Methods*
           -- Method: print-left-endpoint ((interval *note
                    interval/finite-left: ❨190❩.) stream)
           -- Method: print-left-endpoint ((interval *note
                    interval/infinite-left: ❨182❩.) stream)
 -- Generic Function: print-right-endpoint (interval stream)
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Methods*
           -- Method: print-right-endpoint ((interval *note
                    interval/finite-right: ❨187❩.) stream)
           -- Method: print-right-endpoint ((interval *note
                    interval/infinite-right: ❨196❩.) stream)
 -- Generic Function: refine-quadrature (quadrature)
     Refine quadrature with more points.  Return the sum for those
     points.
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
     *Methods*
           -- Method: refine-quadrature ((quadrature *note
                    midpoint-quadrature: ❨86❩.))
           -- Method: refine-quadrature ((quadrature *note
                    trapezoidal-quadrature: ❨59❩.))
 -- Generic Function: richardson-coefficient (quadrature)
     Return the coefficient $q$ for Richardson approximation.
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
     *Methods*
           -- Method: richardson-coefficient ((quadrature *note
                    midpoint-quadrature: ❨86❩.))
           -- Method: richardson-coefficient ((quadrature *note
                    trapezoidal-quadrature: ❨59❩.))
 -- Generic Function: transformed-quadrature (function interval
          transformation)
     Return a quadrature for integrating FUNCTION on INTERVAL, which may
     be infinite, in which case FUNCTION will be transformed.
     TRANSFORMATION can be used to select the transformation when
     applicable, otherwise it is NIL.
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
     *Methods*
           -- Method: transformed-quadrature (function (interval *note
                    finite-interval: ❨172❩.) (transformation null))
           -- Method: transformed-quadrature (function (interval *note
                    plusinf-interval: ❨150❩.) (transformation null))


File: num-utils.info,  Node: Private structures,  Next: Private classes,  Prev: Private generic functions,  Up: Internals

4.2.4 Structures
----------------

 -- Structure: iterative-quadrature
     Quadrature building block.

     F is the function.

     A and B are the endpoints.

     H is the stepsize.
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
     *Direct superclasses*
          structure-object.
     *Direct subclasses*
             • *note midpoint-quadrature: ❨86❩.
             • *note trapezoidal-quadrature: ❨59❩.
     *Direct slots*
           -- Slot: f
               *Type*
                    (function (double-float) double-float)
               *Readers*
                    *note iterative-quadrature-f: ❨76❩.
               *Writers*
                    *note (setf iterative-quadrature-f): ❨77❩.
           -- Slot: a
               *Type*
                    double-float
               *Readers*
                    *note iterative-quadrature-a: ❨41❩.
               *Writers*
                    *note (setf iterative-quadrature-a): ❨42❩.
           -- Slot: b
               *Type*
                    double-float
               *Readers*
                    *note iterative-quadrature-b: ❨91❩.
               *Writers*
                    *note (setf iterative-quadrature-b): ❨92❩.
           -- Slot: h
               *Type*
                    double-float
               *Readers*
                    *note iterative-quadrature-h: ❨89❩.
               *Writers*
                    *note (setf iterative-quadrature-h): ❨90❩.
           -- Slot: n
               *Type*
                    fixnum
               *Initform*
                    0
               *Readers*
                    *note iterative-quadrature-n: ❨111❩.
               *Writers*
                    *note (setf iterative-quadrature-n): ❨112❩.
           -- Slot: sum
               *Package*
                    *note num-utils.arithmetic: ❨30❩.
               *Type*
                    double-float
               *Initform*
                    0.0d0
               *Readers*
                    *note iterative-quadrature-sum: ❨66❩.
               *Writers*
                    *note (setf iterative-quadrature-sum): ❨67❩.
 -- Structure: midpoint-quadrature
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
     *Direct superclasses*
          *note iterative-quadrature: ❨98❩.
     *Direct methods*
             • *note refine-quadrature: ❨115❩.
             • *note richardson-coefficient: ❨108❩.
 -- Structure: richardson-extrapolation
     Given A(h)=A_0 + sum_{k=1}^infty a_k h^{kp}, calculate
     approximations for A given A(h q^{-k}), where the latter can be
     incorporated using RICHARDSON-ITERATION with consecutive values for
     k=1,...,max_iter, which returns the latest A(0) as the first and
     the largest relative change, which can be used to test termination.

     The algorithm uses Richardson extrapolation, the required
     coefficient is q^k.
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
     *Direct superclasses*
          structure-object.
     *Direct slots*
           -- Slot: coefficient
               *Type*
                    double-float
               *Readers*
                    *note richardson-extrapolation-coefficient: ❨64❩.
               *Writers*
                    *note (setf richardson-extrapolation-coefficient):
                    ❨65❩.
           -- Slot: n
               *Type*
                    fixnum
               *Initform*
                    0
               *Readers*
                    *note richardson-extrapolation-n: ❨62❩.
               *Writers*
                    *note (setf richardson-extrapolation-n): ❨63❩.
           -- Slot: diagonal
               *Type*
                    (array double-float (*))
               *Readers*
                    *note richardson-extrapolation-diagonal: ❨79❩.
               *Writers*
                    *note (setf richardson-extrapolation-diagonal):
                    ❨80❩.
 -- Structure: trapezoidal-quadrature
     *Package*
          *note num-utils.quadrature: ❨20❩.
     *Source*
          *note quadrature.lisp: ❨16❩.
     *Direct superclasses*
          *note iterative-quadrature: ❨98❩.
     *Direct methods*
             • *note refine-quadrature: ❨116❩.
             • *note richardson-coefficient: ❨109❩.


File: num-utils.info,  Node: Private classes,  Next: Private types,  Prev: Private structures,  Up: Internals

4.2.5 Classes
-------------

 -- Class: interval/finite-left
     Interval with left endpoint.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Direct subclasses*
             • *note finite-interval: ❨172❩.
             • *note plusinf-interval: ❨150❩.
     *Direct methods*
             • *note left: ❨157❩.
             • *note open-left?: ❨137❩.
             • *note print-left-endpoint: ❨184❩.
     *Direct slots*
           -- Slot: left
               *Type*
                    real
               *Initargs*
                    :left
               *Readers*
                    *note left: ❨157❩.
               *Writers*
                    This slot is read-only.
           -- Slot: open-left?
               *Type*
                    boolean
               *Initargs*
                    :open-left?
               *Readers*
                    *note open-left?: ❨137❩.
               *Writers*
                    This slot is read-only.
 -- Class: interval/finite-right
     Interval with right endpoint.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Direct subclasses*
             • *note finite-interval: ❨172❩.
             • *note minusinf-interval: ❨171❩.
     *Direct methods*
             • *note open-right?: ❨175❩.
             • *note print-right-endpoint: ❨180❩.
             • *note right: ❨166❩.
     *Direct slots*
           -- Slot: right
               *Type*
                    real
               *Initargs*
                    :right
               *Readers*
                    *note right: ❨166❩.
               *Writers*
                    This slot is read-only.
           -- Slot: open-right?
               *Type*
                    boolean
               *Initargs*
                    :open-right?
               *Readers*
                    *note open-right?: ❨175❩.
               *Writers*
                    This slot is read-only.
 -- Class: interval/infinite-left
     Left endpoint is -∞.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Direct subclasses*
             • *note minusinf-interval: ❨171❩.
             • *note real-line: ❨148❩.
     *Direct methods*
             • *note left: ❨156❩.
             • *note open-left?: ❨136❩.
             • *note print-left-endpoint: ❨185❩.
 -- Class: interval/infinite-right
     Right endpoint is ∞.
     *Package*
          *note num-utils.interval: ❨23❩.
     *Source*
          *note interval.lisp: ❨9❩.
     *Direct subclasses*
             • *note plusinf-interval: ❨150❩.
             • *note real-line: ❨148❩.
     *Direct methods*
             • *note open-right?: ❨174❩.
             • *note print-right-endpoint: ❨181❩.
             • *note right: ❨165❩.


File: num-utils.info,  Node: Private types,  Prev: Private classes,  Up: Internals

4.2.6 Types
-----------

 -- Type: infinite ()
     Representing infinity (extending the real line).
     *Package*
          *note num-utils.extended-real: ❨27❩.
     *Source*
          *note extended-real.lisp: ❨8❩.


File: num-utils.info,  Node: Indexes,  Prev: Definitions,  Up: Top

Appendix A Indexes
******************

* Menu:

* Concept index::
* Function index::
* Variable index::
* Data type index::


File: num-utils.info,  Node: Concept index,  Next: Function index,  Prev: Indexes,  Up: Indexes

A.1 Concepts
============


File: num-utils.info,  Node: Function index,  Next: Variable index,  Prev: Concept index,  Up: Indexes

A.2 Functions
=============

 [index ]
* Menu:

* &diagonal-matrix:                      Private macros.      (line   6)
* &diagonal-matrix-r/o:                  Private macros.      (line  12)
* &interval:                             Public macros.       (line   6)
* (setf diagonal-matrix-elements):       Public ordinary functions.
                                                              (line 178)
* (setf diagonal-vector):                Public generic functions.
                                                              (line  30)
* (setf diagonal-vector) <1>:            Public generic functions.
                                                              (line  37)
* (setf iterative-quadrature-a):         Private ordinary functions.
                                                              (line 154)
* (setf iterative-quadrature-b):         Private ordinary functions.
                                                              (line 162)
* (setf iterative-quadrature-f):         Private ordinary functions.
                                                              (line 170)
* (setf iterative-quadrature-h):         Private ordinary functions.
                                                              (line 178)
* (setf iterative-quadrature-n):         Private ordinary functions.
                                                              (line 186)
* (setf iterative-quadrature-sum):       Private ordinary functions.
                                                              (line 199)
* (setf max-error):                      Public ordinary functions.
                                                              (line 488)
* (setf mean-error):                     Public ordinary functions.
                                                              (line 496)
* (setf midpoint-quadrature-a):          Private ordinary functions.
                                                              (line 273)
* (setf midpoint-quadrature-b):          Private ordinary functions.
                                                              (line 283)
* (setf midpoint-quadrature-f):          Private ordinary functions.
                                                              (line 293)
* (setf midpoint-quadrature-h):          Private ordinary functions.
                                                              (line 303)
* (setf midpoint-quadrature-n):          Private ordinary functions.
                                                              (line 313)
* (setf midpoint-quadrature-sum):        Private ordinary functions.
                                                              (line 328)
* (setf min-error):                      Public ordinary functions.
                                                              (line 504)
* (setf richardson-extrapolation-coefficient): Private ordinary functions.
                                                              (line 384)
* (setf richardson-extrapolation-diagonal): Private ordinary functions.
                                                              (line 392)
* (setf richardson-extrapolation-n):     Private ordinary functions.
                                                              (line 400)
* (setf rms):                            Public ordinary functions.
                                                              (line 590)
* (setf test-count):                     Public ordinary functions.
                                                              (line 690)
* (setf trapezoidal-quadrature-a):       Private ordinary functions.
                                                              (line 480)
* (setf trapezoidal-quadrature-b):       Private ordinary functions.
                                                              (line 490)
* (setf trapezoidal-quadrature-f):       Private ordinary functions.
                                                              (line 500)
* (setf trapezoidal-quadrature-h):       Private ordinary functions.
                                                              (line 510)
* (setf trapezoidal-quadrature-n):       Private ordinary functions.
                                                              (line 520)
* (setf trapezoidal-quadrature-sum):     Private ordinary functions.
                                                              (line 535)
* (setf variance0):                      Public ordinary functions.
                                                              (line 717)
* (setf variance1):                      Public ordinary functions.
                                                              (line 725)
* (setf worst-case):                     Public ordinary functions.
                                                              (line 745)
* 1c:                                    Public ordinary functions.
                                                              (line   6)
* <:                                     Public ordinary functions.
                                                              (line  13)
* <=:                                    Public ordinary functions.
                                                              (line  18)
* =:                                     Public ordinary functions.
                                                              (line  23)
* >:                                     Public ordinary functions.
                                                              (line  28)
* >=:                                    Public ordinary functions.
                                                              (line  33)
* ab-to-cd-intercept-slope:              Private ordinary functions.
                                                              (line   6)
* ab-to-cinf:                            Private ordinary functions.
                                                              (line  13)
* above-diagonal?:                       Private ordinary functions.
                                                              (line  19)
* abs-diff:                              Public ordinary functions.
                                                              (line  38)
* absolute-square:                       Public ordinary functions.
                                                              (line  44)
* as-alist:                              Public generic functions.
                                                              (line   6)
* as-array:                              Public standalone methods.
                                                              (line   6)
* as-array <1>:                          Public standalone methods.
                                                              (line  11)
* as-array <2>:                          Public standalone methods.
                                                              (line  16)
* as-array <3>:                          Public standalone methods.
                                                              (line  21)
* as-bit-vector:                         Public ordinary functions.
                                                              (line  50)
* as-double-float:                       Public ordinary functions.
                                                              (line  57)
* as-integer:                            Public ordinary functions.
                                                              (line  63)
* as-plist:                              Public generic functions.
                                                              (line  12)
* as-plist <1>:                          Public generic functions.
                                                              (line  20)
* as-simple-fixnum-vector:               Public ordinary functions.
                                                              (line  71)
* below-diagonal?:                       Private ordinary functions.
                                                              (line  26)
* bic:                                   Public ordinary functions.
                                                              (line  78)
* binary-search:                         Public ordinary functions.
                                                              (line  84)
* boolean-sequence-p:                    Private ordinary functions.
                                                              (line  33)
* boolean?:                              Private ordinary functions.
                                                              (line  38)
* ceiling*:                              Public ordinary functions.
                                                              (line 100)
* chebyshev-approximate:                 Public ordinary functions.
                                                              (line 107)
* chebyshev-approximate-implementation:  Private generic functions.
                                                              (line   6)
* chebyshev-approximate-implementation <1>: Private generic functions.
                                                              (line  14)
* chebyshev-approximate-implementation <2>: Private generic functions.
                                                              (line  17)
* chebyshev-recursion:                   Private ordinary functions.
                                                              (line  44)
* chebyshev-regression:                  Public ordinary functions.
                                                              (line 116)
* chebyshev-root:                        Public ordinary functions.
                                                              (line 124)
* chebyshev-roots:                       Public ordinary functions.
                                                              (line 131)
* check-types:                           Public macros.       (line  14)
* cinf-to-ab:                            Private ordinary functions.
                                                              (line  50)
* compare-fns:                           Public ordinary functions.
                                                              (line 138)
* compare-vectors:                       Public ordinary functions.
                                                              (line 144)
* Compiler Macro, make-vector:           Public compiler macros.
                                                              (line   7)
* copy-diagonal-matrix:                  Private ordinary functions.
                                                              (line  57)
* copy-hermitian-matrix:                 Private ordinary functions.
                                                              (line  62)
* copy-iterative-quadrature:             Private ordinary functions.
                                                              (line  67)
* copy-lower-triangular-matrix:          Private ordinary functions.
                                                              (line  72)
* copy-midpoint-quadrature:              Private ordinary functions.
                                                              (line  77)
* copy-relative:                         Private ordinary functions.
                                                              (line  82)
* copy-richardson-extrapolation:         Private ordinary functions.
                                                              (line  87)
* copy-spacer:                           Private ordinary functions.
                                                              (line  92)
* copy-test-results:                     Private ordinary functions.
                                                              (line  97)
* copy-trapezoidal-quadrature:           Private ordinary functions.
                                                              (line 102)
* copy-upper-triangular-matrix:          Private ordinary functions.
                                                              (line 107)
* copy-wrapped-matrix:                   Private ordinary functions.
                                                              (line 112)
* cube:                                  Public ordinary functions.
                                                              (line 150)
* cumulative-product:                    Public ordinary functions.
                                                              (line 156)
* cumulative-sum:                        Public ordinary functions.
                                                              (line 164)
* curry*:                                Public macros.       (line  21)
* define-comparison:                     Private macros.      (line  18)
* define-e&:                             Private macros.      (line  25)
* define-e1:                             Private macros.      (line  31)
* define-e2:                             Private macros.      (line  37)
* define-elementwise-as-array:           Private macros.      (line  43)
* define-elementwise-reduction:          Private macros.      (line  50)
* define-elementwise-same-class:         Private macros.      (line  56)
* define-elementwise-univariate:         Private macros.      (line  64)
* define-elementwise-with-constant:      Private macros.      (line  72)
* define-num=-with-accessors:            Public macros.       (line  29)
* define-rounding-with-offset:           Private macros.      (line  80)
* define-structure-num=:                 Public macros.       (line  36)
* define-with-multiple-bindings:         Public macros.       (line  43)
* define-wrapped-matrix:                 Private macros.      (line  85)
* diagonal-matrix:                       Public ordinary functions.
                                                              (line 172)
* diagonal-matrix-elements:              Public ordinary functions.
                                                              (line 177)
* diagonal-matrix-p:                     Private ordinary functions.
                                                              (line 117)
* diagonal-mx:                           Public ordinary functions.
                                                              (line 185)
* diagonal-vector:                       Public generic functions.
                                                              (line  21)
* diagonal-vector <1>:                   Public generic functions.
                                                              (line  28)
* diagonal-vector <2>:                   Public generic functions.
                                                              (line  29)
* dims:                                  Public standalone methods.
                                                              (line  26)
* dims <1>:                              Public standalone methods.
                                                              (line  31)
* distinct:                              Public ordinary functions.
                                                              (line 191)
* divides?:                              Public ordinary functions.
                                                              (line 198)
* e*:                                    Public ordinary functions.
                                                              (line 205)
* e+:                                    Public ordinary functions.
                                                              (line 211)
* e-:                                    Public ordinary functions.
                                                              (line 217)
* e/:                                    Public ordinary functions.
                                                              (line 223)
* e1-:                                   Public generic functions.
                                                              (line  38)
* e1- <1>:                               Public generic functions.
                                                              (line  45)
* e1- <2>:                               Public generic functions.
                                                              (line  48)
* e1- <3>:                               Public generic functions.
                                                              (line  51)
* e1- <4>:                               Public generic functions.
                                                              (line  54)
* e1- <5>:                               Public generic functions.
                                                              (line  57)
* e1- <6>:                               Public generic functions.
                                                              (line  58)
* e1/:                                   Public generic functions.
                                                              (line  59)
* e1/ <1>:                               Public generic functions.
                                                              (line  66)
* e1/ <2>:                               Public generic functions.
                                                              (line  69)
* e1/ <3>:                               Public generic functions.
                                                              (line  72)
* e1/ <4>:                               Public generic functions.
                                                              (line  75)
* e1/ <5>:                               Public generic functions.
                                                              (line  78)
* e1/ <6>:                               Public generic functions.
                                                              (line  79)
* e1log:                                 Public generic functions.
                                                              (line  80)
* e1log <1>:                             Public generic functions.
                                                              (line  87)
* e1log <2>:                             Public generic functions.
                                                              (line  90)
* e1log <3>:                             Public generic functions.
                                                              (line  93)
* e1log <4>:                             Public generic functions.
                                                              (line  96)
* e1log <5>:                             Public generic functions.
                                                              (line  99)
* e1log <6>:                             Public generic functions.
                                                              (line 100)
* e2*:                                   Public generic functions.
                                                              (line 101)
* e2* <1>:                               Public generic functions.
                                                              (line 108)
* e2* <2>:                               Public generic functions.
                                                              (line 112)
* e2* <3>:                               Public generic functions.
                                                              (line 116)
* e2* <4>:                               Public generic functions.
                                                              (line 120)
* e2* <5>:                               Public generic functions.
                                                              (line 124)
* e2* <6>:                               Public generic functions.
                                                              (line 127)
* e2* <7>:                               Public generic functions.
                                                              (line 130)
* e2* <8>:                               Public generic functions.
                                                              (line 134)
* e2* <9>:                               Public generic functions.
                                                              (line 138)
* e2* <10>:                              Public generic functions.
                                                              (line 142)
* e2* <11>:                              Public generic functions.
                                                              (line 146)
* e2* <12>:                              Public generic functions.
                                                              (line 150)
* e2* <13>:                              Public generic functions.
                                                              (line 154)
* e2* <14>:                              Public generic functions.
                                                              (line 157)
* e2* <15>:                              Public generic functions.
                                                              (line 160)
* e2* <16>:                              Public generic functions.
                                                              (line 161)
* e2* <17>:                              Public generic functions.
                                                              (line 162)
* e2* <18>:                              Public generic functions.
                                                              (line 163)
* e2* <19>:                              Public generic functions.
                                                              (line 164)
* e2* <20>:                              Public generic functions.
                                                              (line 165)
* e2* <21>:                              Public generic functions.
                                                              (line 166)
* e2+:                                   Public generic functions.
                                                              (line 167)
* e2+ <1>:                               Public generic functions.
                                                              (line 174)
* e2+ <2>:                               Public generic functions.
                                                              (line 178)
* e2+ <3>:                               Public generic functions.
                                                              (line 182)
* e2+ <4>:                               Public generic functions.
                                                              (line 186)
* e2+ <5>:                               Public generic functions.
                                                              (line 190)
* e2+ <6>:                               Public generic functions.
                                                              (line 193)
* e2+ <7>:                               Public generic functions.
                                                              (line 196)
* e2+ <8>:                               Public generic functions.
                                                              (line 197)
* e2+ <9>:                               Public generic functions.
                                                              (line 198)
* e2+ <10>:                              Public generic functions.
                                                              (line 199)
* e2+ <11>:                              Public generic functions.
                                                              (line 200)
* e2+ <12>:                              Public generic functions.
                                                              (line 201)
* e2+ <13>:                              Public generic functions.
                                                              (line 202)
* e2-:                                   Public generic functions.
                                                              (line 203)
* e2- <1>:                               Public generic functions.
                                                              (line 210)
* e2- <2>:                               Public generic functions.
                                                              (line 214)
* e2- <3>:                               Public generic functions.
                                                              (line 218)
* e2- <4>:                               Public generic functions.
                                                              (line 222)
* e2- <5>:                               Public generic functions.
                                                              (line 226)
* e2- <6>:                               Public generic functions.
                                                              (line 229)
* e2- <7>:                               Public generic functions.
                                                              (line 232)
* e2- <8>:                               Public generic functions.
                                                              (line 233)
* e2- <9>:                               Public generic functions.
                                                              (line 234)
* e2- <10>:                              Public generic functions.
                                                              (line 235)
* e2- <11>:                              Public generic functions.
                                                              (line 236)
* e2- <12>:                              Public generic functions.
                                                              (line 237)
* e2- <13>:                              Public generic functions.
                                                              (line 238)
* e2/:                                   Public generic functions.
                                                              (line 239)
* e2/ <1>:                               Public generic functions.
                                                              (line 246)
* e2/ <2>:                               Public generic functions.
                                                              (line 249)
* e2/ <3>:                               Public generic functions.
                                                              (line 252)
* e2/ <4>:                               Public generic functions.
                                                              (line 256)
* e2/ <5>:                               Public generic functions.
                                                              (line 260)
* e2/ <6>:                               Public generic functions.
                                                              (line 264)
* e2/ <7>:                               Public generic functions.
                                                              (line 268)
* e2/ <8>:                               Public generic functions.
                                                              (line 272)
* e2/ <9>:                               Public generic functions.
                                                              (line 276)
* e2/ <10>:                              Public generic functions.
                                                              (line 277)
* e2/ <11>:                              Public generic functions.
                                                              (line 278)
* e2/ <12>:                              Public generic functions.
                                                              (line 279)
* e2/ <13>:                              Public generic functions.
                                                              (line 280)
* e2/ <14>:                              Public generic functions.
                                                              (line 281)
* e2/ <15>:                              Public generic functions.
                                                              (line 282)
* e2<:                                   Public generic functions.
                                                              (line 283)
* e2< <1>:                               Public generic functions.
                                                              (line 290)
* e2< <2>:                               Public generic functions.
                                                              (line 291)
* e2< <3>:                               Public generic functions.
                                                              (line 292)
* e2< <4>:                               Public generic functions.
                                                              (line 293)
* e2< <5>:                               Public generic functions.
                                                              (line 294)
* e2< <6>:                               Public generic functions.
                                                              (line 295)
* e2< <7>:                               Public generic functions.
                                                              (line 296)
* e2<=:                                  Public generic functions.
                                                              (line 297)
* e2<= <1>:                              Public generic functions.
                                                              (line 304)
* e2<= <2>:                              Public generic functions.
                                                              (line 305)
* e2<= <3>:                              Public generic functions.
                                                              (line 306)
* e2<= <4>:                              Public generic functions.
                                                              (line 307)
* e2<= <5>:                              Public generic functions.
                                                              (line 308)
* e2<= <6>:                              Public generic functions.
                                                              (line 309)
* e2<= <7>:                              Public generic functions.
                                                              (line 310)
* e2=:                                   Public generic functions.
                                                              (line 311)
* e2= <1>:                               Public generic functions.
                                                              (line 318)
* e2= <2>:                               Public generic functions.
                                                              (line 319)
* e2= <3>:                               Public generic functions.
                                                              (line 320)
* e2= <4>:                               Public generic functions.
                                                              (line 321)
* e2= <5>:                               Public generic functions.
                                                              (line 322)
* e2= <6>:                               Public generic functions.
                                                              (line 323)
* e2= <7>:                               Public generic functions.
                                                              (line 324)
* e2>:                                   Public generic functions.
                                                              (line 325)
* e2> <1>:                               Public generic functions.
                                                              (line 332)
* e2> <2>:                               Public generic functions.
                                                              (line 333)
* e2> <3>:                               Public generic functions.
                                                              (line 334)
* e2> <4>:                               Public generic functions.
                                                              (line 335)
* e2> <5>:                               Public generic functions.
                                                              (line 336)
* e2> <6>:                               Public generic functions.
                                                              (line 337)
* e2> <7>:                               Public generic functions.
                                                              (line 338)
* e2>=:                                  Public generic functions.
                                                              (line 339)
* e2>= <1>:                              Public generic functions.
                                                              (line 346)
* e2>= <2>:                              Public generic functions.
                                                              (line 347)
* e2>= <3>:                              Public generic functions.
                                                              (line 348)
* e2>= <4>:                              Public generic functions.
                                                              (line 349)
* e2>= <5>:                              Public generic functions.
                                                              (line 350)
* e2>= <6>:                              Public generic functions.
                                                              (line 351)
* e2>= <7>:                              Public generic functions.
                                                              (line 352)
* e2log:                                 Public generic functions.
                                                              (line 353)
* e2log <1>:                             Public generic functions.
                                                              (line 360)
* e2log <2>:                             Public generic functions.
                                                              (line 361)
* e2log <3>:                             Public generic functions.
                                                              (line 362)
* e2log <4>:                             Public generic functions.
                                                              (line 363)
* e2log <5>:                             Public generic functions.
                                                              (line 364)
* e2log <6>:                             Public generic functions.
                                                              (line 365)
* e2log <7>:                             Public generic functions.
                                                              (line 366)
* eceiling:                              Public generic functions.
                                                              (line 367)
* eceiling <1>:                          Public generic functions.
                                                              (line 374)
* eceiling <2>:                          Public generic functions.
                                                              (line 375)
* econjugate:                            Public generic functions.
                                                              (line 376)
* econjugate <1>:                        Public generic functions.
                                                              (line 383)
* econjugate <2>:                        Public generic functions.
                                                              (line 384)
* ecos:                                  Public generic functions.
                                                              (line 385)
* ecos <1>:                              Public generic functions.
                                                              (line 392)
* ecos <2>:                              Public generic functions.
                                                              (line 393)
* eexp:                                  Public generic functions.
                                                              (line 394)
* eexp <1>:                              Public generic functions.
                                                              (line 401)
* eexp <2>:                              Public generic functions.
                                                              (line 404)
* eexp <3>:                              Public generic functions.
                                                              (line 407)
* eexp <4>:                              Public generic functions.
                                                              (line 410)
* eexp <5>:                              Public generic functions.
                                                              (line 413)
* eexp <6>:                              Public generic functions.
                                                              (line 414)
* eexpt:                                 Public generic functions.
                                                              (line 415)
* eexpt <1>:                             Public generic functions.
                                                              (line 422)
* eexpt <2>:                             Public generic functions.
                                                              (line 423)
* eexpt <3>:                             Public generic functions.
                                                              (line 424)
* eexpt <4>:                             Public generic functions.
                                                              (line 425)
* eexpt <5>:                             Public generic functions.
                                                              (line 426)
* eexpt <6>:                             Public generic functions.
                                                              (line 427)
* eexpt <7>:                             Public generic functions.
                                                              (line 428)
* efloor:                                Public generic functions.
                                                              (line 429)
* efloor <1>:                            Public generic functions.
                                                              (line 436)
* efloor <2>:                            Public generic functions.
                                                              (line 437)
* element-type:                          Public standalone methods.
                                                              (line  36)
* element-type <1>:                      Public standalone methods.
                                                              (line  41)
* elementwise-float-contagion:           Public ordinary functions.
                                                              (line 229)
* elog:                                  Public ordinary functions.
                                                              (line 236)
* emax:                                  Public ordinary functions.
                                                              (line 242)
* emin:                                  Public ordinary functions.
                                                              (line 248)
* emod:                                  Public generic functions.
                                                              (line 438)
* emod <1>:                              Public generic functions.
                                                              (line 445)
* emod <2>:                              Public generic functions.
                                                              (line 446)
* emod <3>:                              Public generic functions.
                                                              (line 447)
* emod <4>:                              Public generic functions.
                                                              (line 448)
* emod <5>:                              Public generic functions.
                                                              (line 449)
* emod <6>:                              Public generic functions.
                                                              (line 450)
* emod <7>:                              Public generic functions.
                                                              (line 451)
* ensure-valid-elements:                 Private ordinary functions.
                                                              (line 122)
* ereduce:                               Public generic functions.
                                                              (line 452)
* ereduce <1>:                           Public generic functions.
                                                              (line 459)
* ereduce <2>:                           Public generic functions.
                                                              (line 460)
* ereduce <3>:                           Public generic functions.
                                                              (line 461)
* esin:                                  Public generic functions.
                                                              (line 462)
* esin <1>:                              Public generic functions.
                                                              (line 469)
* esin <2>:                              Public generic functions.
                                                              (line 470)
* esqrt:                                 Public generic functions.
                                                              (line 471)
* esqrt <1>:                             Public generic functions.
                                                              (line 478)
* esqrt <2>:                             Public generic functions.
                                                              (line 481)
* esqrt <3>:                             Public generic functions.
                                                              (line 484)
* esqrt <4>:                             Public generic functions.
                                                              (line 487)
* esqrt <5>:                             Public generic functions.
                                                              (line 490)
* esqrt <6>:                             Public generic functions.
                                                              (line 491)
* esquare:                               Private generic functions.
                                                              (line  20)
* esquare <1>:                           Private generic functions.
                                                              (line  27)
* esquare <2>:                           Private generic functions.
                                                              (line  28)
* evaluate-chebyshev:                    Public ordinary functions.
                                                              (line 254)
* evaluate-polynomial:                   Public ordinary functions.
                                                              (line 261)
* evaluate-rational:                     Public ordinary functions.
                                                              (line 269)
* exp-1:                                 Public ordinary functions.
                                                              (line 282)
* exp-1/x:                               Public ordinary functions.
                                                              (line 288)
* expanding:                             Public macros.       (line  51)
* expt-1:                                Public ordinary functions.
                                                              (line 294)
* extend-interval:                       Public generic functions.
                                                              (line 492)
* extend-interval <1>:                   Public generic functions.
                                                              (line 500)
* extend-interval <2>:                   Public generic functions.
                                                              (line 501)
* extend-interval <3>:                   Public generic functions.
                                                              (line 502)
* extend-interval <4>:                   Public generic functions.
                                                              (line 504)
* extend-interval <5>:                   Public generic functions.
                                                              (line 506)
* extend-interval <6>:                   Public generic functions.
                                                              (line 507)
* extend-pairwise-comparison:            Private ordinary functions.
                                                              (line 136)
* extendf-interval:                      Public macros.       (line  57)
* fixnum?:                               Public ordinary functions.
                                                              (line 301)
* floor*:                                Public ordinary functions.
                                                              (line 307)
* Function, (setf diagonal-matrix-elements): Public ordinary functions.
                                                              (line 179)
* Function, (setf iterative-quadrature-a): Private ordinary functions.
                                                              (line 155)
* Function, (setf iterative-quadrature-b): Private ordinary functions.
                                                              (line 163)
* Function, (setf iterative-quadrature-f): Private ordinary functions.
                                                              (line 171)
* Function, (setf iterative-quadrature-h): Private ordinary functions.
                                                              (line 179)
* Function, (setf iterative-quadrature-n): Private ordinary functions.
                                                              (line 187)
* Function, (setf iterative-quadrature-sum): Private ordinary functions.
                                                              (line 200)
* Function, (setf max-error):            Public ordinary functions.
                                                              (line 489)
* Function, (setf mean-error):           Public ordinary functions.
                                                              (line 497)
* Function, (setf midpoint-quadrature-a): Private ordinary functions.
                                                              (line 274)
* Function, (setf midpoint-quadrature-b): Private ordinary functions.
                                                              (line 284)
* Function, (setf midpoint-quadrature-f): Private ordinary functions.
                                                              (line 294)
* Function, (setf midpoint-quadrature-h): Private ordinary functions.
                                                              (line 304)
* Function, (setf midpoint-quadrature-n): Private ordinary functions.
                                                              (line 314)
* Function, (setf midpoint-quadrature-sum): Private ordinary functions.
                                                              (line 329)
* Function, (setf min-error):            Public ordinary functions.
                                                              (line 505)
* Function, (setf richardson-extrapolation-coefficient): Private ordinary functions.
                                                              (line 385)
* Function, (setf richardson-extrapolation-diagonal): Private ordinary functions.
                                                              (line 393)
* Function, (setf richardson-extrapolation-n): Private ordinary functions.
                                                              (line 401)
* Function, (setf rms):                  Public ordinary functions.
                                                              (line 591)
* Function, (setf test-count):           Public ordinary functions.
                                                              (line 691)
* Function, (setf trapezoidal-quadrature-a): Private ordinary functions.
                                                              (line 481)
* Function, (setf trapezoidal-quadrature-b): Private ordinary functions.
                                                              (line 491)
* Function, (setf trapezoidal-quadrature-f): Private ordinary functions.
                                                              (line 501)
* Function, (setf trapezoidal-quadrature-h): Private ordinary functions.
                                                              (line 511)
* Function, (setf trapezoidal-quadrature-n): Private ordinary functions.
                                                              (line 521)
* Function, (setf trapezoidal-quadrature-sum): Private ordinary functions.
                                                              (line 536)
* Function, (setf variance0):            Public ordinary functions.
                                                              (line 718)
* Function, (setf variance1):            Public ordinary functions.
                                                              (line 726)
* Function, (setf worst-case):           Public ordinary functions.
                                                              (line 746)
* Function, 1c:                          Public ordinary functions.
                                                              (line   7)
* Function, <:                           Public ordinary functions.
                                                              (line  14)
* Function, <=:                          Public ordinary functions.
                                                              (line  19)
* Function, =:                           Public ordinary functions.
                                                              (line  24)
* Function, >:                           Public ordinary functions.
                                                              (line  29)
* Function, >=:                          Public ordinary functions.
                                                              (line  34)
* Function, ab-to-cd-intercept-slope:    Private ordinary functions.
                                                              (line   7)
* Function, ab-to-cinf:                  Private ordinary functions.
                                                              (line  14)
* Function, above-diagonal?:             Private ordinary functions.
                                                              (line  20)
* Function, abs-diff:                    Public ordinary functions.
                                                              (line  39)
* Function, absolute-square:             Public ordinary functions.
                                                              (line  45)
* Function, as-bit-vector:               Public ordinary functions.
                                                              (line  51)
* Function, as-double-float:             Public ordinary functions.
                                                              (line  58)
* Function, as-integer:                  Public ordinary functions.
                                                              (line  64)
* Function, as-simple-fixnum-vector:     Public ordinary functions.
                                                              (line  72)
* Function, below-diagonal?:             Private ordinary functions.
                                                              (line  27)
* Function, bic:                         Public ordinary functions.
                                                              (line  79)
* Function, binary-search:               Public ordinary functions.
                                                              (line  85)
* Function, boolean-sequence-p:          Private ordinary functions.
                                                              (line  34)
* Function, boolean?:                    Private ordinary functions.
                                                              (line  39)
* Function, ceiling*:                    Public ordinary functions.
                                                              (line 101)
* Function, chebyshev-approximate:       Public ordinary functions.
                                                              (line 109)
* Function, chebyshev-recursion:         Private ordinary functions.
                                                              (line  45)
* Function, chebyshev-regression:        Public ordinary functions.
                                                              (line 117)
* Function, chebyshev-root:              Public ordinary functions.
                                                              (line 125)
* Function, chebyshev-roots:             Public ordinary functions.
                                                              (line 132)
* Function, cinf-to-ab:                  Private ordinary functions.
                                                              (line  51)
* Function, compare-fns:                 Public ordinary functions.
                                                              (line 139)
* Function, compare-vectors:             Public ordinary functions.
                                                              (line 145)
* Function, copy-diagonal-matrix:        Private ordinary functions.
                                                              (line  58)
* Function, copy-hermitian-matrix:       Private ordinary functions.
                                                              (line  63)
* Function, copy-iterative-quadrature:   Private ordinary functions.
                                                              (line  68)
* Function, copy-lower-triangular-matrix: Private ordinary functions.
                                                              (line  73)
* Function, copy-midpoint-quadrature:    Private ordinary functions.
                                                              (line  78)
* Function, copy-relative:               Private ordinary functions.
                                                              (line  83)
* Function, copy-richardson-extrapolation: Private ordinary functions.
                                                              (line  88)
* Function, copy-spacer:                 Private ordinary functions.
                                                              (line  93)
* Function, copy-test-results:           Private ordinary functions.
                                                              (line  98)
* Function, copy-trapezoidal-quadrature: Private ordinary functions.
                                                              (line 103)
* Function, copy-upper-triangular-matrix: Private ordinary functions.
                                                              (line 108)
* Function, copy-wrapped-matrix:         Private ordinary functions.
                                                              (line 113)
* Function, cube:                        Public ordinary functions.
                                                              (line 151)
* Function, cumulative-product:          Public ordinary functions.
                                                              (line 157)
* Function, cumulative-sum:              Public ordinary functions.
                                                              (line 165)
* Function, diagonal-matrix:             Public ordinary functions.
                                                              (line 173)
* Function, diagonal-matrix-elements:    Public ordinary functions.
                                                              (line 178)
* Function, diagonal-matrix-p:           Private ordinary functions.
                                                              (line 118)
* Function, diagonal-mx:                 Public ordinary functions.
                                                              (line 186)
* Function, distinct:                    Public ordinary functions.
                                                              (line 192)
* Function, divides?:                    Public ordinary functions.
                                                              (line 199)
* Function, e*:                          Public ordinary functions.
                                                              (line 206)
* Function, e+:                          Public ordinary functions.
                                                              (line 212)
* Function, e-:                          Public ordinary functions.
                                                              (line 218)
* Function, e/:                          Public ordinary functions.
                                                              (line 224)
* Function, elementwise-float-contagion: Public ordinary functions.
                                                              (line 230)
* Function, elog:                        Public ordinary functions.
                                                              (line 237)
* Function, emax:                        Public ordinary functions.
                                                              (line 243)
* Function, emin:                        Public ordinary functions.
                                                              (line 249)
* Function, ensure-valid-elements:       Private ordinary functions.
                                                              (line 123)
* Function, evaluate-chebyshev:          Public ordinary functions.
                                                              (line 255)
* Function, evaluate-polynomial:         Public ordinary functions.
                                                              (line 262)
* Function, evaluate-rational:           Public ordinary functions.
                                                              (line 270)
* Function, exp-1:                       Public ordinary functions.
                                                              (line 283)
* Function, exp-1/x:                     Public ordinary functions.
                                                              (line 289)
* Function, expt-1:                      Public ordinary functions.
                                                              (line 295)
* Function, extend-pairwise-comparison:  Private ordinary functions.
                                                              (line 137)
* Function, fixnum?:                     Public ordinary functions.
                                                              (line 302)
* Function, floor*:                      Public ordinary functions.
                                                              (line 308)
* Function, generate-sequence:           Public ordinary functions.
                                                              (line 315)
* Function, grid-in:                     Public ordinary functions.
                                                              (line 328)
* Function, hermitian-matrix:            Public ordinary functions.
                                                              (line 339)
* Function, hermitian-matrix-elements:   Private ordinary functions.
                                                              (line 144)
* Function, hermitian-matrix-p:          Private ordinary functions.
                                                              (line 149)
* Function, hypot:                       Public ordinary functions.
                                                              (line 345)
* Function, in-interval?:                Public ordinary functions.
                                                              (line 352)
* Function, infinite?:                   Public ordinary functions.
                                                              (line 359)
* Function, interval:                    Public ordinary functions.
                                                              (line 365)
* Function, interval-hull:               Public ordinary functions.
                                                              (line 371)
* Function, interval-length:             Public ordinary functions.
                                                              (line 378)
* Function, interval-midpoint:           Public ordinary functions.
                                                              (line 384)
* Function, iterative-quadrature-a:      Private ordinary functions.
                                                              (line 154)
* Function, iterative-quadrature-b:      Private ordinary functions.
                                                              (line 162)
* Function, iterative-quadrature-f:      Private ordinary functions.
                                                              (line 170)
* Function, iterative-quadrature-h:      Private ordinary functions.
                                                              (line 178)
* Function, iterative-quadrature-n:      Private ordinary functions.
                                                              (line 186)
* Function, iterative-quadrature-p:      Private ordinary functions.
                                                              (line 194)
* Function, iterative-quadrature-sum:    Private ordinary functions.
                                                              (line 199)
* Function, ivec:                        Public ordinary functions.
                                                              (line 391)
* Function, l2norm:                      Public ordinary functions.
                                                              (line 407)
* Function, ln:                          Private ordinary functions.
                                                              (line 207)
* Function, log1+:                       Public ordinary functions.
                                                              (line 413)
* Function, log1+/x:                     Public ordinary functions.
                                                              (line 419)
* Function, log1+exp:                    Public ordinary functions.
                                                              (line 425)
* Function, log1-:                       Public ordinary functions.
                                                              (line 431)
* Function, log1-exp:                    Public ordinary functions.
                                                              (line 437)
* Function, log10:                       Public ordinary functions.
                                                              (line 446)
* Function, log1pmx:                     Public ordinary functions.
                                                              (line 452)
* Function, log2:                        Public ordinary functions.
                                                              (line 459)
* Function, log2-exp:                    Public ordinary functions.
                                                              (line 465)
* Function, logexp-1:                    Public ordinary functions.
                                                              (line 471)
* Function, lower-triangular-matrix:     Public ordinary functions.
                                                              (line 477)
* Function, lower-triangular-matrix-elements: Private ordinary functions.
                                                              (line 213)
* Function, lower-triangular-matrix-p:   Private ordinary functions.
                                                              (line 218)
* Function, make-diagonal-matrix:        Private ordinary functions.
                                                              (line 223)
* Function, make-hermitian-matrix:       Private ordinary functions.
                                                              (line 228)
* Function, make-iterative-quadrature:   Private ordinary functions.
                                                              (line 233)
* Function, make-lower-triangular-matrix: Private ordinary functions.
                                                              (line 238)
* Function, make-test-results:           Private ordinary functions.
                                                              (line 244)
* Function, make-upper-triangular-matrix: Private ordinary functions.
                                                              (line 249)
* Function, make-vector:                 Public ordinary functions.
                                                              (line 483)
* Function, make-wrapped-matrix:         Private ordinary functions.
                                                              (line 254)
* Function, max-error:                   Public ordinary functions.
                                                              (line 488)
* Function, mean-error:                  Public ordinary functions.
                                                              (line 496)
* Function, midpoint-quadrature:         Private ordinary functions.
                                                              (line 259)
* Function, midpoint-quadrature%:        Private ordinary functions.
                                                              (line 264)
* Function, midpoint-quadrature-a:       Private ordinary functions.
                                                              (line 269)
* Function, midpoint-quadrature-b:       Private ordinary functions.
                                                              (line 279)
* Function, midpoint-quadrature-f:       Private ordinary functions.
                                                              (line 289)
* Function, midpoint-quadrature-h:       Private ordinary functions.
                                                              (line 299)
* Function, midpoint-quadrature-n:       Private ordinary functions.
                                                              (line 309)
* Function, midpoint-quadrature-p:       Private ordinary functions.
                                                              (line 319)
* Function, midpoint-quadrature-sum:     Private ordinary functions.
                                                              (line 324)
* Function, min-error:                   Public ordinary functions.
                                                              (line 504)
* Function, monotonicp:                  Public ordinary functions.
                                                              (line 512)
* Function, narrow-bracket?:             Private ordinary functions.
                                                              (line 334)
* Function, near-root?:                  Private ordinary functions.
                                                              (line 340)
* Function, normalize-probabilities:     Public ordinary functions.
                                                              (line 519)
* Function, num-delta:                   Public ordinary functions.
                                                              (line 529)
* Function, num=-function:               Public ordinary functions.
                                                              (line 535)
* Function, numseq:                      Public ordinary functions.
                                                              (line 541)
* Function, opposite-sign?:              Private ordinary functions.
                                                              (line 346)
* Function, pad-left-expansion:          Private ordinary functions.
                                                              (line 352)
* Function, plusminus-interval:          Public ordinary functions.
                                                              (line 555)
* Function, print-length-truncate:       Public ordinary functions.
                                                              (line 561)
* Function, print-matrix:                Public ordinary functions.
                                                              (line 569)
* Function, print-matrix-formatter:      Private ordinary functions.
                                                              (line 359)
* Function, relative:                    Public ordinary functions.
                                                              (line 585)
* Function, relative-fraction:           Private ordinary functions.
                                                              (line 367)
* Function, relative-p:                  Private ordinary functions.
                                                              (line 374)
* Function, richardson-extrapolation:    Private ordinary functions.
                                                              (line 379)
* Function, richardson-extrapolation-coefficient: Private ordinary functions.
                                                              (line 384)
* Function, richardson-extrapolation-diagonal: Private ordinary functions.
                                                              (line 392)
* Function, richardson-extrapolation-n:  Private ordinary functions.
                                                              (line 400)
* Function, richardson-extrapolation-p:  Private ordinary functions.
                                                              (line 408)
* Function, richardson-iteration:        Private ordinary functions.
                                                              (line 413)
* Function, rms:                         Public ordinary functions.
                                                              (line 590)
* Function, romberg-quadrature:          Public ordinary functions.
                                                              (line 599)
* Function, romberg-quadrature%:         Private ordinary functions.
                                                              (line 420)
* Function, root-bisection:              Public ordinary functions.
                                                              (line 608)
* Function, rootfinding-delta:           Private ordinary functions.
                                                              (line 429)
* Function, round*:                      Public ordinary functions.
                                                              (line 622)
* Function, same-sign-p:                 Public ordinary functions.
                                                              (line 630)
* Function, sequence-maximum:            Public ordinary functions.
                                                              (line 637)
* Function, sequence-minimum:            Public ordinary functions.
                                                              (line 643)
* Function, shrink-interval:             Public ordinary functions.
                                                              (line 650)
* Function, similar-element-type:        Private ordinary functions.
                                                              (line 435)
* Function, similar-sequence-type:       Private ordinary functions.
                                                              (line 442)
* Function, spacer:                      Public ordinary functions.
                                                              (line 659)
* Function, spacer-p:                    Private ordinary functions.
                                                              (line 449)
* Function, spacer-weight:               Private ordinary functions.
                                                              (line 454)
* Function, split-interval:              Public ordinary functions.
                                                              (line 664)
* Function, square:                      Public ordinary functions.
                                                              (line 675)
* Function, subintervals-in:             Public ordinary functions.
                                                              (line 681)
* Function, test-count:                  Public ordinary functions.
                                                              (line 690)
* Function, test-fn:                     Public ordinary functions.
                                                              (line 698)
* Function, test-results-p:              Private ordinary functions.
                                                              (line 461)
* Function, trapezoidal-quadrature:      Private ordinary functions.
                                                              (line 466)
* Function, trapezoidal-quadrature%:     Private ordinary functions.
                                                              (line 471)
* Function, trapezoidal-quadrature-a:    Private ordinary functions.
                                                              (line 476)
* Function, trapezoidal-quadrature-b:    Private ordinary functions.
                                                              (line 486)
* Function, trapezoidal-quadrature-f:    Private ordinary functions.
                                                              (line 496)
* Function, trapezoidal-quadrature-h:    Private ordinary functions.
                                                              (line 506)
* Function, trapezoidal-quadrature-n:    Private ordinary functions.
                                                              (line 516)
* Function, trapezoidal-quadrature-p:    Private ordinary functions.
                                                              (line 526)
* Function, trapezoidal-quadrature-sum:  Private ordinary functions.
                                                              (line 531)
* Function, truncate*:                   Public ordinary functions.
                                                              (line 704)
* Function, upper-triangular-matrix:     Public ordinary functions.
                                                              (line 711)
* Function, upper-triangular-matrix-elements: Private ordinary functions.
                                                              (line 541)
* Function, upper-triangular-matrix-p:   Private ordinary functions.
                                                              (line 546)
* Function, valid-sparse-type?:          Private ordinary functions.
                                                              (line 551)
* Function, variance0:                   Public ordinary functions.
                                                              (line 717)
* Function, variance1:                   Public ordinary functions.
                                                              (line 725)
* Function, vec:                         Public ordinary functions.
                                                              (line 733)
* Function, within?:                     Public ordinary functions.
                                                              (line 739)
* Function, worst-case:                  Public ordinary functions.
                                                              (line 745)
* Function, wrapped-matrix-elements:     Public ordinary functions.
                                                              (line 753)
* Function, wrapped-matrix-p:            Private ordinary functions.
                                                              (line 558)
* Function, zero-like:                   Private ordinary functions.
                                                              (line 563)
* generate-sequence:                     Public ordinary functions.
                                                              (line 314)
* Generic Function, (setf diagonal-vector): Public generic functions.
                                                              (line  31)
* Generic Function, as-alist:            Public generic functions.
                                                              (line   7)
* Generic Function, as-plist:            Public generic functions.
                                                              (line  13)
* Generic Function, chebyshev-approximate-implementation: Private generic functions.
                                                              (line   8)
* Generic Function, diagonal-vector:     Public generic functions.
                                                              (line  22)
* Generic Function, e1-:                 Public generic functions.
                                                              (line  39)
* Generic Function, e1/:                 Public generic functions.
                                                              (line  60)
* Generic Function, e1log:               Public generic functions.
                                                              (line  81)
* Generic Function, e2*:                 Public generic functions.
                                                              (line 102)
* Generic Function, e2+:                 Public generic functions.
                                                              (line 168)
* Generic Function, e2-:                 Public generic functions.
                                                              (line 204)
* Generic Function, e2/:                 Public generic functions.
                                                              (line 240)
* Generic Function, e2<:                 Public generic functions.
                                                              (line 284)
* Generic Function, e2<=:                Public generic functions.
                                                              (line 298)
* Generic Function, e2=:                 Public generic functions.
                                                              (line 312)
* Generic Function, e2>:                 Public generic functions.
                                                              (line 326)
* Generic Function, e2>=:                Public generic functions.
                                                              (line 340)
* Generic Function, e2log:               Public generic functions.
                                                              (line 354)
* Generic Function, eceiling:            Public generic functions.
                                                              (line 368)
* Generic Function, econjugate:          Public generic functions.
                                                              (line 377)
* Generic Function, ecos:                Public generic functions.
                                                              (line 386)
* Generic Function, eexp:                Public generic functions.
                                                              (line 395)
* Generic Function, eexpt:               Public generic functions.
                                                              (line 416)
* Generic Function, efloor:              Public generic functions.
                                                              (line 430)
* Generic Function, emod:                Public generic functions.
                                                              (line 439)
* Generic Function, ereduce:             Public generic functions.
                                                              (line 453)
* Generic Function, esin:                Public generic functions.
                                                              (line 463)
* Generic Function, esqrt:               Public generic functions.
                                                              (line 472)
* Generic Function, esquare:             Private generic functions.
                                                              (line  21)
* Generic Function, extend-interval:     Public generic functions.
                                                              (line 493)
* Generic Function, l2norm-square:       Public generic functions.
                                                              (line 509)
* Generic Function, left:                Public generic functions.
                                                              (line 517)
* Generic Function, map-array:           Public generic functions.
                                                              (line 531)
* Generic Function, num=:                Public generic functions.
                                                              (line 541)
* Generic Function, open-left?:          Public generic functions.
                                                              (line 579)
* Generic Function, open-right?:         Public generic functions.
                                                              (line 593)
* Generic Function, print-left-endpoint: Private generic functions.
                                                              (line  30)
* Generic Function, print-right-endpoint: Private generic functions.
                                                              (line  40)
* Generic Function, product:             Public generic functions.
                                                              (line 607)
* Generic Function, refine-quadrature:   Private generic functions.
                                                              (line  50)
* Generic Function, richardson-coefficient: Private generic functions.
                                                              (line  62)
* Generic Function, right:               Public generic functions.
                                                              (line 616)
* Generic Function, shift-interval:      Public generic functions.
                                                              (line 630)
* Generic Function, sum:                 Public generic functions.
                                                              (line 638)
* Generic Function, transformed-quadrature: Private generic functions.
                                                              (line  74)
* Generic Function, transpose:           Public generic functions.
                                                              (line 647)
* gethash*:                              Public macros.       (line  63)
* grid-in:                               Public ordinary functions.
                                                              (line 327)
* hermitian-matrix:                      Public ordinary functions.
                                                              (line 338)
* hermitian-matrix-elements:             Private ordinary functions.
                                                              (line 143)
* hermitian-matrix-p:                    Private ordinary functions.
                                                              (line 148)
* hermitian-mx:                          Public macros.       (line  70)
* hypot:                                 Public ordinary functions.
                                                              (line 344)
* in-interval?:                          Public ordinary functions.
                                                              (line 351)
* infinite?:                             Public ordinary functions.
                                                              (line 358)
* initialize-instance:                   Public standalone methods.
                                                              (line  47)
* interval:                              Public ordinary functions.
                                                              (line 364)
* interval-hull:                         Public ordinary functions.
                                                              (line 370)
* interval-length:                       Public ordinary functions.
                                                              (line 377)
* interval-midpoint:                     Public ordinary functions.
                                                              (line 383)
* iterative-quadrature-a:                Private ordinary functions.
                                                              (line 153)
* iterative-quadrature-b:                Private ordinary functions.
                                                              (line 161)
* iterative-quadrature-f:                Private ordinary functions.
                                                              (line 169)
* iterative-quadrature-h:                Private ordinary functions.
                                                              (line 177)
* iterative-quadrature-n:                Private ordinary functions.
                                                              (line 185)
* iterative-quadrature-p:                Private ordinary functions.
                                                              (line 193)
* iterative-quadrature-sum:              Private ordinary functions.
                                                              (line 198)
* ivec:                                  Public ordinary functions.
                                                              (line 390)
* l2norm:                                Public ordinary functions.
                                                              (line 406)
* l2norm-square:                         Public generic functions.
                                                              (line 508)
* l2norm-square <1>:                     Public generic functions.
                                                              (line 515)
* lambda-template:                       Public macros.       (line  79)
* left:                                  Public generic functions.
                                                              (line 516)
* left <1>:                              Public generic functions.
                                                              (line 523)
* left <2>:                              Public generic functions.
                                                              (line 525)
* ln:                                    Private ordinary functions.
                                                              (line 206)
* log1+:                                 Public ordinary functions.
                                                              (line 412)
* log1+/x:                               Public ordinary functions.
                                                              (line 418)
* log1+exp:                              Public ordinary functions.
                                                              (line 424)
* log1-:                                 Public ordinary functions.
                                                              (line 430)
* log1-exp:                              Public ordinary functions.
                                                              (line 436)
* log10:                                 Public ordinary functions.
                                                              (line 445)
* log1pmx:                               Public ordinary functions.
                                                              (line 451)
* log2:                                  Public ordinary functions.
                                                              (line 458)
* log2-exp:                              Public ordinary functions.
                                                              (line 464)
* logexp-1:                              Public ordinary functions.
                                                              (line 470)
* lower-triangular-matrix:               Public ordinary functions.
                                                              (line 476)
* lower-triangular-matrix-elements:      Private ordinary functions.
                                                              (line 212)
* lower-triangular-matrix-p:             Private ordinary functions.
                                                              (line 217)
* lower-triangular-mx:                   Public macros.       (line  85)
* Macro, &diagonal-matrix:               Private macros.      (line   7)
* Macro, &diagonal-matrix-r/o:           Private macros.      (line  13)
* Macro, &interval:                      Public macros.       (line   7)
* Macro, check-types:                    Public macros.       (line  15)
* Macro, curry*:                         Public macros.       (line  22)
* Macro, define-comparison:              Private macros.      (line  19)
* Macro, define-e&:                      Private macros.      (line  27)
* Macro, define-e1:                      Private macros.      (line  32)
* Macro, define-e2:                      Private macros.      (line  38)
* Macro, define-elementwise-as-array:    Private macros.      (line  44)
* Macro, define-elementwise-reduction:   Private macros.      (line  52)
* Macro, define-elementwise-same-class:  Private macros.      (line  58)
* Macro, define-elementwise-univariate:  Private macros.      (line  66)
* Macro, define-elementwise-with-constant: Private macros.    (line  74)
* Macro, define-num=-with-accessors:     Public macros.       (line  30)
* Macro, define-rounding-with-offset:    Private macros.      (line  81)
* Macro, define-structure-num=:          Public macros.       (line  37)
* Macro, define-with-multiple-bindings:  Public macros.       (line  44)
* Macro, define-wrapped-matrix:          Private macros.      (line  88)
* Macro, expanding:                      Public macros.       (line  52)
* Macro, extendf-interval:               Public macros.       (line  58)
* Macro, gethash*:                       Public macros.       (line  64)
* Macro, hermitian-mx:                   Public macros.       (line  71)
* Macro, lambda-template:                Public macros.       (line  80)
* Macro, lower-triangular-mx:            Public macros.       (line  86)
* Macro, mapping-array:                  Private macros.      (line  93)
* Macro, mx:                             Public macros.       (line  95)
* Macro, splice-awhen:                   Public macros.       (line 103)
* Macro, splice-when:                    Public macros.       (line 109)
* Macro, univariate-rootfinder-loop%:    Private macros.      (line  99)
* Macro, upper-triangular-mx:            Public macros.       (line 117)
* Macro, with-double-floats:             Public macros.       (line 125)
* Macro, with-template:                  Public macros.       (line 140)
* make-diagonal-matrix:                  Private ordinary functions.
                                                              (line 222)
* make-hermitian-matrix:                 Private ordinary functions.
                                                              (line 227)
* make-iterative-quadrature:             Private ordinary functions.
                                                              (line 232)
* make-lower-triangular-matrix:          Private ordinary functions.
                                                              (line 237)
* make-test-results:                     Private ordinary functions.
                                                              (line 242)
* make-upper-triangular-matrix:          Private ordinary functions.
                                                              (line 248)
* make-vector:                           Public compiler macros.
                                                              (line   6)
* make-vector <1>:                       Public ordinary functions.
                                                              (line 482)
* make-wrapped-matrix:                   Private ordinary functions.
                                                              (line 253)
* map-array:                             Public generic functions.
                                                              (line 530)
* map-array <1>:                         Public generic functions.
                                                              (line 534)
* mapping-array:                         Private macros.      (line  92)
* max-error:                             Public ordinary functions.
                                                              (line 487)
* mean-error:                            Public ordinary functions.
                                                              (line 495)
* Method, (setf diagonal-vector):        Public generic functions.
                                                              (line  38)
* Method, as-array:                      Public standalone methods.
                                                              (line   7)
* Method, as-array <1>:                  Public standalone methods.
                                                              (line  12)
* Method, as-array <2>:                  Public standalone methods.
                                                              (line  17)
* Method, as-array <3>:                  Public standalone methods.
                                                              (line  22)
* Method, as-plist:                      Public generic functions.
                                                              (line  21)
* Method, chebyshev-approximate-implementation: Private generic functions.
                                                              (line  17)
* Method, chebyshev-approximate-implementation <1>: Private generic functions.
                                                              (line  20)
* Method, diagonal-vector:               Public generic functions.
                                                              (line  29)
* Method, diagonal-vector <1>:           Public generic functions.
                                                              (line  30)
* Method, dims:                          Public standalone methods.
                                                              (line  27)
* Method, dims <1>:                      Public standalone methods.
                                                              (line  32)
* Method, e1-:                           Public generic functions.
                                                              (line  46)
* Method, e1- <1>:                       Public generic functions.
                                                              (line  49)
* Method, e1- <2>:                       Public generic functions.
                                                              (line  52)
* Method, e1- <3>:                       Public generic functions.
                                                              (line  55)
* Method, e1- <4>:                       Public generic functions.
                                                              (line  58)
* Method, e1- <5>:                       Public generic functions.
                                                              (line  59)
* Method, e1/:                           Public generic functions.
                                                              (line  67)
* Method, e1/ <1>:                       Public generic functions.
                                                              (line  70)
* Method, e1/ <2>:                       Public generic functions.
                                                              (line  73)
* Method, e1/ <3>:                       Public generic functions.
                                                              (line  76)
* Method, e1/ <4>:                       Public generic functions.
                                                              (line  79)
* Method, e1/ <5>:                       Public generic functions.
                                                              (line  80)
* Method, e1log:                         Public generic functions.
                                                              (line  88)
* Method, e1log <1>:                     Public generic functions.
                                                              (line  91)
* Method, e1log <2>:                     Public generic functions.
                                                              (line  94)
* Method, e1log <3>:                     Public generic functions.
                                                              (line  97)
* Method, e1log <4>:                     Public generic functions.
                                                              (line 100)
* Method, e1log <5>:                     Public generic functions.
                                                              (line 101)
* Method, e2*:                           Public generic functions.
                                                              (line 110)
* Method, e2* <1>:                       Public generic functions.
                                                              (line 114)
* Method, e2* <2>:                       Public generic functions.
                                                              (line 118)
* Method, e2* <3>:                       Public generic functions.
                                                              (line 122)
* Method, e2* <4>:                       Public generic functions.
                                                              (line 125)
* Method, e2* <5>:                       Public generic functions.
                                                              (line 128)
* Method, e2* <6>:                       Public generic functions.
                                                              (line 132)
* Method, e2* <7>:                       Public generic functions.
                                                              (line 136)
* Method, e2* <8>:                       Public generic functions.
                                                              (line 140)
* Method, e2* <9>:                       Public generic functions.
                                                              (line 144)
* Method, e2* <10>:                      Public generic functions.
                                                              (line 148)
* Method, e2* <11>:                      Public generic functions.
                                                              (line 152)
* Method, e2* <12>:                      Public generic functions.
                                                              (line 155)
* Method, e2* <13>:                      Public generic functions.
                                                              (line 158)
* Method, e2* <14>:                      Public generic functions.
                                                              (line 161)
* Method, e2* <15>:                      Public generic functions.
                                                              (line 162)
* Method, e2* <16>:                      Public generic functions.
                                                              (line 163)
* Method, e2* <17>:                      Public generic functions.
                                                              (line 164)
* Method, e2* <18>:                      Public generic functions.
                                                              (line 165)
* Method, e2* <19>:                      Public generic functions.
                                                              (line 166)
* Method, e2* <20>:                      Public generic functions.
                                                              (line 167)
* Method, e2+:                           Public generic functions.
                                                              (line 176)
* Method, e2+ <1>:                       Public generic functions.
                                                              (line 180)
* Method, e2+ <2>:                       Public generic functions.
                                                              (line 184)
* Method, e2+ <3>:                       Public generic functions.
                                                              (line 188)
* Method, e2+ <4>:                       Public generic functions.
                                                              (line 191)
* Method, e2+ <5>:                       Public generic functions.
                                                              (line 194)
* Method, e2+ <6>:                       Public generic functions.
                                                              (line 197)
* Method, e2+ <7>:                       Public generic functions.
                                                              (line 198)
* Method, e2+ <8>:                       Public generic functions.
                                                              (line 199)
* Method, e2+ <9>:                       Public generic functions.
                                                              (line 200)
* Method, e2+ <10>:                      Public generic functions.
                                                              (line 201)
* Method, e2+ <11>:                      Public generic functions.
                                                              (line 202)
* Method, e2+ <12>:                      Public generic functions.
                                                              (line 203)
* Method, e2-:                           Public generic functions.
                                                              (line 212)
* Method, e2- <1>:                       Public generic functions.
                                                              (line 216)
* Method, e2- <2>:                       Public generic functions.
                                                              (line 220)
* Method, e2- <3>:                       Public generic functions.
                                                              (line 224)
* Method, e2- <4>:                       Public generic functions.
                                                              (line 227)
* Method, e2- <5>:                       Public generic functions.
                                                              (line 230)
* Method, e2- <6>:                       Public generic functions.
                                                              (line 233)
* Method, e2- <7>:                       Public generic functions.
                                                              (line 234)
* Method, e2- <8>:                       Public generic functions.
                                                              (line 235)
* Method, e2- <9>:                       Public generic functions.
                                                              (line 236)
* Method, e2- <10>:                      Public generic functions.
                                                              (line 237)
* Method, e2- <11>:                      Public generic functions.
                                                              (line 238)
* Method, e2- <12>:                      Public generic functions.
                                                              (line 239)
* Method, e2/:                           Public generic functions.
                                                              (line 247)
* Method, e2/ <1>:                       Public generic functions.
                                                              (line 250)
* Method, e2/ <2>:                       Public generic functions.
                                                              (line 254)
* Method, e2/ <3>:                       Public generic functions.
                                                              (line 258)
* Method, e2/ <4>:                       Public generic functions.
                                                              (line 262)
* Method, e2/ <5>:                       Public generic functions.
                                                              (line 266)
* Method, e2/ <6>:                       Public generic functions.
                                                              (line 270)
* Method, e2/ <7>:                       Public generic functions.
                                                              (line 274)
* Method, e2/ <8>:                       Public generic functions.
                                                              (line 277)
* Method, e2/ <9>:                       Public generic functions.
                                                              (line 278)
* Method, e2/ <10>:                      Public generic functions.
                                                              (line 279)
* Method, e2/ <11>:                      Public generic functions.
                                                              (line 280)
* Method, e2/ <12>:                      Public generic functions.
                                                              (line 281)
* Method, e2/ <13>:                      Public generic functions.
                                                              (line 282)
* Method, e2/ <14>:                      Public generic functions.
                                                              (line 283)
* Method, e2<:                           Public generic functions.
                                                              (line 291)
* Method, e2< <1>:                       Public generic functions.
                                                              (line 292)
* Method, e2< <2>:                       Public generic functions.
                                                              (line 293)
* Method, e2< <3>:                       Public generic functions.
                                                              (line 294)
* Method, e2< <4>:                       Public generic functions.
                                                              (line 295)
* Method, e2< <5>:                       Public generic functions.
                                                              (line 296)
* Method, e2< <6>:                       Public generic functions.
                                                              (line 297)
* Method, e2<=:                          Public generic functions.
                                                              (line 305)
* Method, e2<= <1>:                      Public generic functions.
                                                              (line 306)
* Method, e2<= <2>:                      Public generic functions.
                                                              (line 307)
* Method, e2<= <3>:                      Public generic functions.
                                                              (line 308)
* Method, e2<= <4>:                      Public generic functions.
                                                              (line 309)
* Method, e2<= <5>:                      Public generic functions.
                                                              (line 310)
* Method, e2<= <6>:                      Public generic functions.
                                                              (line 311)
* Method, e2=:                           Public generic functions.
                                                              (line 319)
* Method, e2= <1>:                       Public generic functions.
                                                              (line 320)
* Method, e2= <2>:                       Public generic functions.
                                                              (line 321)
* Method, e2= <3>:                       Public generic functions.
                                                              (line 322)
* Method, e2= <4>:                       Public generic functions.
                                                              (line 323)
* Method, e2= <5>:                       Public generic functions.
                                                              (line 324)
* Method, e2= <6>:                       Public generic functions.
                                                              (line 325)
* Method, e2>:                           Public generic functions.
                                                              (line 333)
* Method, e2> <1>:                       Public generic functions.
                                                              (line 334)
* Method, e2> <2>:                       Public generic functions.
                                                              (line 335)
* Method, e2> <3>:                       Public generic functions.
                                                              (line 336)
* Method, e2> <4>:                       Public generic functions.
                                                              (line 337)
* Method, e2> <5>:                       Public generic functions.
                                                              (line 338)
* Method, e2> <6>:                       Public generic functions.
                                                              (line 339)
* Method, e2>=:                          Public generic functions.
                                                              (line 347)
* Method, e2>= <1>:                      Public generic functions.
                                                              (line 348)
* Method, e2>= <2>:                      Public generic functions.
                                                              (line 349)
* Method, e2>= <3>:                      Public generic functions.
                                                              (line 350)
* Method, e2>= <4>:                      Public generic functions.
                                                              (line 351)
* Method, e2>= <5>:                      Public generic functions.
                                                              (line 352)
* Method, e2>= <6>:                      Public generic functions.
                                                              (line 353)
* Method, e2log:                         Public generic functions.
                                                              (line 361)
* Method, e2log <1>:                     Public generic functions.
                                                              (line 362)
* Method, e2log <2>:                     Public generic functions.
                                                              (line 363)
* Method, e2log <3>:                     Public generic functions.
                                                              (line 364)
* Method, e2log <4>:                     Public generic functions.
                                                              (line 365)
* Method, e2log <5>:                     Public generic functions.
                                                              (line 366)
* Method, e2log <6>:                     Public generic functions.
                                                              (line 367)
* Method, eceiling:                      Public generic functions.
                                                              (line 375)
* Method, eceiling <1>:                  Public generic functions.
                                                              (line 376)
* Method, econjugate:                    Public generic functions.
                                                              (line 384)
* Method, econjugate <1>:                Public generic functions.
                                                              (line 385)
* Method, ecos:                          Public generic functions.
                                                              (line 393)
* Method, ecos <1>:                      Public generic functions.
                                                              (line 394)
* Method, eexp:                          Public generic functions.
                                                              (line 402)
* Method, eexp <1>:                      Public generic functions.
                                                              (line 405)
* Method, eexp <2>:                      Public generic functions.
                                                              (line 408)
* Method, eexp <3>:                      Public generic functions.
                                                              (line 411)
* Method, eexp <4>:                      Public generic functions.
                                                              (line 414)
* Method, eexp <5>:                      Public generic functions.
                                                              (line 415)
* Method, eexpt:                         Public generic functions.
                                                              (line 423)
* Method, eexpt <1>:                     Public generic functions.
                                                              (line 424)
* Method, eexpt <2>:                     Public generic functions.
                                                              (line 425)
* Method, eexpt <3>:                     Public generic functions.
                                                              (line 426)
* Method, eexpt <4>:                     Public generic functions.
                                                              (line 427)
* Method, eexpt <5>:                     Public generic functions.
                                                              (line 428)
* Method, eexpt <6>:                     Public generic functions.
                                                              (line 429)
* Method, efloor:                        Public generic functions.
                                                              (line 437)
* Method, efloor <1>:                    Public generic functions.
                                                              (line 438)
* Method, element-type:                  Public standalone methods.
                                                              (line  37)
* Method, element-type <1>:              Public standalone methods.
                                                              (line  43)
* Method, emod:                          Public generic functions.
                                                              (line 446)
* Method, emod <1>:                      Public generic functions.
                                                              (line 447)
* Method, emod <2>:                      Public generic functions.
                                                              (line 448)
* Method, emod <3>:                      Public generic functions.
                                                              (line 449)
* Method, emod <4>:                      Public generic functions.
                                                              (line 450)
* Method, emod <5>:                      Public generic functions.
                                                              (line 451)
* Method, emod <6>:                      Public generic functions.
                                                              (line 452)
* Method, ereduce:                       Public generic functions.
                                                              (line 460)
* Method, ereduce <1>:                   Public generic functions.
                                                              (line 461)
* Method, ereduce <2>:                   Public generic functions.
                                                              (line 462)
* Method, esin:                          Public generic functions.
                                                              (line 470)
* Method, esin <1>:                      Public generic functions.
                                                              (line 471)
* Method, esqrt:                         Public generic functions.
                                                              (line 479)
* Method, esqrt <1>:                     Public generic functions.
                                                              (line 482)
* Method, esqrt <2>:                     Public generic functions.
                                                              (line 485)
* Method, esqrt <3>:                     Public generic functions.
                                                              (line 488)
* Method, esqrt <4>:                     Public generic functions.
                                                              (line 491)
* Method, esqrt <5>:                     Public generic functions.
                                                              (line 492)
* Method, esquare:                       Private generic functions.
                                                              (line  28)
* Method, esquare <1>:                   Private generic functions.
                                                              (line  29)
* Method, extend-interval:               Public generic functions.
                                                              (line 501)
* Method, extend-interval <1>:           Public generic functions.
                                                              (line 502)
* Method, extend-interval <2>:           Public generic functions.
                                                              (line 504)
* Method, extend-interval <3>:           Public generic functions.
                                                              (line 506)
* Method, extend-interval <4>:           Public generic functions.
                                                              (line 507)
* Method, extend-interval <5>:           Public generic functions.
                                                              (line 508)
* Method, initialize-instance:           Public standalone methods.
                                                              (line  49)
* Method, l2norm-square:                 Public generic functions.
                                                              (line 516)
* Method, left:                          Public generic functions.
                                                              (line 525)
* Method, left <1>:                      Public generic functions.
                                                              (line 527)
* Method, map-array:                     Public generic functions.
                                                              (line 535)
* Method, num=:                          Public generic functions.
                                                              (line 559)
* Method, num= <1>:                      Public generic functions.
                                                              (line 563)
* Method, num= <2>:                      Public generic functions.
                                                              (line 567)
* Method, num= <3>:                      Public generic functions.
                                                              (line 571)
* Method, num= <4>:                      Public generic functions.
                                                              (line 574)
* Method, num= <5>:                      Public generic functions.
                                                              (line 575)
* Method, num= <6>:                      Public generic functions.
                                                              (line 576)
* Method, num= <7>:                      Public generic functions.
                                                              (line 577)
* Method, num= <8>:                      Public generic functions.
                                                              (line 578)
* Method, open-left?:                    Public generic functions.
                                                              (line 587)
* Method, open-left? <1>:                Public generic functions.
                                                              (line 589)
* Method, open-right?:                   Public generic functions.
                                                              (line 601)
* Method, open-right? <1>:               Public generic functions.
                                                              (line 603)
* Method, print-left-endpoint:           Private generic functions.
                                                              (line  37)
* Method, print-left-endpoint <1>:       Private generic functions.
                                                              (line  39)
* Method, print-object:                  Public standalone methods.
                                                              (line  52)
* Method, print-object <1>:              Public standalone methods.
                                                              (line  56)
* Method, print-object <2>:              Public standalone methods.
                                                              (line  60)
* Method, print-object <3>:              Public standalone methods.
                                                              (line  64)
* Method, print-right-endpoint:          Private generic functions.
                                                              (line  47)
* Method, print-right-endpoint <1>:      Private generic functions.
                                                              (line  49)
* Method, product:                       Public generic functions.
                                                              (line 614)
* Method, product <1>:                   Public generic functions.
                                                              (line 615)
* Method, refine-quadrature:             Private generic functions.
                                                              (line  59)
* Method, refine-quadrature <1>:         Private generic functions.
                                                              (line  61)
* Method, richardson-coefficient:        Private generic functions.
                                                              (line  70)
* Method, richardson-coefficient <1>:    Private generic functions.
                                                              (line  72)
* Method, right:                         Public generic functions.
                                                              (line 624)
* Method, right <1>:                     Public generic functions.
                                                              (line 626)
* Method, select:                        Public standalone methods.
                                                              (line  68)
* Method, select <1>:                    Public standalone methods.
                                                              (line  74)
* Method, select <2>:                    Public standalone methods.
                                                              (line  80)
* Method, shift-interval:                Public generic functions.
                                                              (line 637)
* Method, sum:                           Public generic functions.
                                                              (line 645)
* Method, sum <1>:                       Public generic functions.
                                                              (line 646)
* Method, transformed-quadrature:        Private generic functions.
                                                              (line  85)
* Method, transformed-quadrature <1>:    Private generic functions.
                                                              (line  87)
* Method, transpose:                     Public generic functions.
                                                              (line 654)
* Method, transpose <1>:                 Public generic functions.
                                                              (line 656)
* Method, transpose <2>:                 Public generic functions.
                                                              (line 658)
* Method, transpose <3>:                 Public generic functions.
                                                              (line 660)
* Method, transpose <4>:                 Public generic functions.
                                                              (line 662)
* midpoint-quadrature:                   Private ordinary functions.
                                                              (line 258)
* midpoint-quadrature%:                  Private ordinary functions.
                                                              (line 263)
* midpoint-quadrature-a:                 Private ordinary functions.
                                                              (line 268)
* midpoint-quadrature-b:                 Private ordinary functions.
                                                              (line 278)
* midpoint-quadrature-f:                 Private ordinary functions.
                                                              (line 288)
* midpoint-quadrature-h:                 Private ordinary functions.
                                                              (line 298)
* midpoint-quadrature-n:                 Private ordinary functions.
                                                              (line 308)
* midpoint-quadrature-p:                 Private ordinary functions.
                                                              (line 318)
* midpoint-quadrature-sum:               Private ordinary functions.
                                                              (line 323)
* min-error:                             Public ordinary functions.
                                                              (line 503)
* monotonicp:                            Public ordinary functions.
                                                              (line 511)
* mx:                                    Public macros.       (line  94)
* narrow-bracket?:                       Private ordinary functions.
                                                              (line 333)
* near-root?:                            Private ordinary functions.
                                                              (line 339)
* normalize-probabilities:               Public ordinary functions.
                                                              (line 518)
* num-delta:                             Public ordinary functions.
                                                              (line 528)
* num=:                                  Public generic functions.
                                                              (line 540)
* num= <1>:                              Public generic functions.
                                                              (line 557)
* num= <2>:                              Public generic functions.
                                                              (line 561)
* num= <3>:                              Public generic functions.
                                                              (line 565)
* num= <4>:                              Public generic functions.
                                                              (line 569)
* num= <5>:                              Public generic functions.
                                                              (line 573)
* num= <6>:                              Public generic functions.
                                                              (line 574)
* num= <7>:                              Public generic functions.
                                                              (line 575)
* num= <8>:                              Public generic functions.
                                                              (line 576)
* num= <9>:                              Public generic functions.
                                                              (line 577)
* num=-function:                         Public ordinary functions.
                                                              (line 534)
* numseq:                                Public ordinary functions.
                                                              (line 540)
* open-left?:                            Public generic functions.
                                                              (line 578)
* open-left? <1>:                        Public generic functions.
                                                              (line 585)
* open-left? <2>:                        Public generic functions.
                                                              (line 587)
* open-right?:                           Public generic functions.
                                                              (line 592)
* open-right? <1>:                       Public generic functions.
                                                              (line 599)
* open-right? <2>:                       Public generic functions.
                                                              (line 601)
* opposite-sign?:                        Private ordinary functions.
                                                              (line 345)
* pad-left-expansion:                    Private ordinary functions.
                                                              (line 351)
* plusminus-interval:                    Public ordinary functions.
                                                              (line 553)
* print-left-endpoint:                   Private generic functions.
                                                              (line  29)
* print-left-endpoint <1>:               Private generic functions.
                                                              (line  35)
* print-left-endpoint <2>:               Private generic functions.
                                                              (line  37)
* print-length-truncate:                 Public ordinary functions.
                                                              (line 560)
* print-matrix:                          Public ordinary functions.
                                                              (line 567)
* print-matrix-formatter:                Private ordinary functions.
                                                              (line 358)
* print-object:                          Public standalone methods.
                                                              (line  51)
* print-object <1>:                      Public standalone methods.
                                                              (line  54)
* print-object <2>:                      Public standalone methods.
                                                              (line  58)
* print-object <3>:                      Public standalone methods.
                                                              (line  62)
* print-right-endpoint:                  Private generic functions.
                                                              (line  39)
* print-right-endpoint <1>:              Private generic functions.
                                                              (line  45)
* print-right-endpoint <2>:              Private generic functions.
                                                              (line  47)
* product:                               Public generic functions.
                                                              (line 606)
* product <1>:                           Public generic functions.
                                                              (line 613)
* product <2>:                           Public generic functions.
                                                              (line 614)
* refine-quadrature:                     Private generic functions.
                                                              (line  49)
* refine-quadrature <1>:                 Private generic functions.
                                                              (line  57)
* refine-quadrature <2>:                 Private generic functions.
                                                              (line  59)
* relative:                              Public ordinary functions.
                                                              (line 584)
* relative-fraction:                     Private ordinary functions.
                                                              (line 366)
* relative-p:                            Private ordinary functions.
                                                              (line 373)
* richardson-coefficient:                Private generic functions.
                                                              (line  61)
* richardson-coefficient <1>:            Private generic functions.
                                                              (line  68)
* richardson-coefficient <2>:            Private generic functions.
                                                              (line  70)
* richardson-extrapolation:              Private ordinary functions.
                                                              (line 378)
* richardson-extrapolation-coefficient:  Private ordinary functions.
                                                              (line 383)
* richardson-extrapolation-diagonal:     Private ordinary functions.
                                                              (line 391)
* richardson-extrapolation-n:            Private ordinary functions.
                                                              (line 399)
* richardson-extrapolation-p:            Private ordinary functions.
                                                              (line 407)
* richardson-iteration:                  Private ordinary functions.
                                                              (line 412)
* right:                                 Public generic functions.
                                                              (line 615)
* right <1>:                             Public generic functions.
                                                              (line 622)
* right <2>:                             Public generic functions.
                                                              (line 624)
* rms:                                   Public ordinary functions.
                                                              (line 589)
* romberg-quadrature:                    Public ordinary functions.
                                                              (line 597)
* romberg-quadrature%:                   Private ordinary functions.
                                                              (line 419)
* root-bisection:                        Public ordinary functions.
                                                              (line 607)
* rootfinding-delta:                     Private ordinary functions.
                                                              (line 428)
* round*:                                Public ordinary functions.
                                                              (line 621)
* same-sign-p:                           Public ordinary functions.
                                                              (line 629)
* select:                                Public standalone methods.
                                                              (line  66)
* select <1>:                            Public standalone methods.
                                                              (line  72)
* select <2>:                            Public standalone methods.
                                                              (line  78)
* sequence-maximum:                      Public ordinary functions.
                                                              (line 636)
* sequence-minimum:                      Public ordinary functions.
                                                              (line 642)
* shift-interval:                        Public generic functions.
                                                              (line 629)
* shift-interval <1>:                    Public generic functions.
                                                              (line 635)
* shrink-interval:                       Public ordinary functions.
                                                              (line 648)
* similar-element-type:                  Private ordinary functions.
                                                              (line 434)
* similar-sequence-type:                 Private ordinary functions.
                                                              (line 441)
* spacer:                                Public ordinary functions.
                                                              (line 658)
* spacer-p:                              Private ordinary functions.
                                                              (line 448)
* spacer-weight:                         Private ordinary functions.
                                                              (line 453)
* splice-awhen:                          Public macros.       (line 102)
* splice-when:                           Public macros.       (line 108)
* split-interval:                        Public ordinary functions.
                                                              (line 663)
* square:                                Public ordinary functions.
                                                              (line 674)
* subintervals-in:                       Public ordinary functions.
                                                              (line 680)
* sum:                                   Public generic functions.
                                                              (line 637)
* sum <1>:                               Public generic functions.
                                                              (line 644)
* sum <2>:                               Public generic functions.
                                                              (line 645)
* test-count:                            Public ordinary functions.
                                                              (line 689)
* test-fn:                               Public ordinary functions.
                                                              (line 697)
* test-results-p:                        Private ordinary functions.
                                                              (line 460)
* transformed-quadrature:                Private generic functions.
                                                              (line  72)
* transformed-quadrature <1>:            Private generic functions.
                                                              (line  83)
* transformed-quadrature <2>:            Private generic functions.
                                                              (line  85)
* transpose:                             Public generic functions.
                                                              (line 646)
* transpose <1>:                         Public generic functions.
                                                              (line 653)
* transpose <2>:                         Public generic functions.
                                                              (line 654)
* transpose <3>:                         Public generic functions.
                                                              (line 656)
* transpose <4>:                         Public generic functions.
                                                              (line 658)
* transpose <5>:                         Public generic functions.
                                                              (line 660)
* trapezoidal-quadrature:                Private ordinary functions.
                                                              (line 465)
* trapezoidal-quadrature%:               Private ordinary functions.
                                                              (line 470)
* trapezoidal-quadrature-a:              Private ordinary functions.
                                                              (line 475)
* trapezoidal-quadrature-b:              Private ordinary functions.
                                                              (line 485)
* trapezoidal-quadrature-f:              Private ordinary functions.
                                                              (line 495)
* trapezoidal-quadrature-h:              Private ordinary functions.
                                                              (line 505)
* trapezoidal-quadrature-n:              Private ordinary functions.
                                                              (line 515)
* trapezoidal-quadrature-p:              Private ordinary functions.
                                                              (line 525)
* trapezoidal-quadrature-sum:            Private ordinary functions.
                                                              (line 530)
* truncate*:                             Public ordinary functions.
                                                              (line 703)
* univariate-rootfinder-loop%:           Private macros.      (line  97)
* upper-triangular-matrix:               Public ordinary functions.
                                                              (line 710)
* upper-triangular-matrix-elements:      Private ordinary functions.
                                                              (line 540)
* upper-triangular-matrix-p:             Private ordinary functions.
                                                              (line 545)
* upper-triangular-mx:                   Public macros.       (line 116)
* valid-sparse-type?:                    Private ordinary functions.
                                                              (line 550)
* variance0:                             Public ordinary functions.
                                                              (line 716)
* variance1:                             Public ordinary functions.
                                                              (line 724)
* vec:                                   Public ordinary functions.
                                                              (line 732)
* with-double-floats:                    Public macros.       (line 124)
* with-template:                         Public macros.       (line 139)
* within?:                               Public ordinary functions.
                                                              (line 738)
* worst-case:                            Public ordinary functions.
                                                              (line 744)
* wrapped-matrix-elements:               Public ordinary functions.
                                                              (line 752)
* wrapped-matrix-p:                      Private ordinary functions.
                                                              (line 557)
* zero-like:                             Private ordinary functions.
                                                              (line 562)

